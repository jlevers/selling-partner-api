<?php
/**
 * Feature
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  SellingPartnerApi
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\FbaOutboundV20200701;
use ArrayAccess;
use SellingPartnerApi\Model\BaseModel;
use SellingPartnerApi\Model\ModelInterface;
use SellingPartnerApi\ObjectSerializer;

/**
 * Feature Class Doc Comment
 *
 * @category Class
 * @description A Multi-Channel Fulfillment feature.
 * @package  SellingPartnerApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Feature extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Feature';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'feature_name' => 'string',
        'feature_description' => 'string',
        'seller_eligible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'feature_name' => null,
        'feature_description' => null,
        'seller_eligible' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature_name' => 'featureName',
        'feature_description' => 'featureDescription',
        'seller_eligible' => 'sellerEligible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature_name' => 'setFeatureName',
        'feature_description' => 'setFeatureDescription',
        'seller_eligible' => 'setSellerEligible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature_name' => 'getFeatureName',
        'feature_description' => 'getFeatureDescription',
        'seller_eligible' => 'getSellerEligible'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feature_name'] = $data['feature_name'] ?? null;
        $this->container['feature_description'] = $data['feature_description'] ?? null;
        $this->container['seller_eligible'] = $data['seller_eligible'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['feature_name'] === null) {
            $invalidProperties[] = "'feature_name' can't be null";
        }
        if ($this->container['feature_description'] === null) {
            $invalidProperties[] = "'feature_description' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets feature_name
     *
     * @return string
     */
    public function getFeatureName()
    {
        return $this->container['feature_name'];
    }

    /**
     * Sets feature_name
     *
     * @param string $feature_name The feature name.
     *
     * @return self
     */
    public function setFeatureName($feature_name)
    {
        $this->container['feature_name'] = $feature_name;

        return $this;
    }
    /**
     * Gets feature_description
     *
     * @return string
     */
    public function getFeatureDescription()
    {
        return $this->container['feature_description'];
    }

    /**
     * Sets feature_description
     *
     * @param string $feature_description The feature description.
     *
     * @return self
     */
    public function setFeatureDescription($feature_description)
    {
        $this->container['feature_description'] = $feature_description;

        return $this;
    }
    /**
     * Gets seller_eligible
     *
     * @return bool|null
     */
    public function getSellerEligible()
    {
        return $this->container['seller_eligible'];
    }

    /**
     * Sets seller_eligible
     *
     * @param bool|null $seller_eligible When true, indicates that the seller is eligible to use the feature.
     *
     * @return self
     */
    public function setSellerEligible($seller_eligible)
    {
        $this->container['seller_eligible'] = $seller_eligible;

        return $this;
    }
}


