<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: SellingPartnerApi\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace SellingPartnerApi\Seller\InvoicesV20240619\Requests;

use Exception;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use SellingPartnerApi\Request;
use SellingPartnerApi\Seller\InvoicesV20240619\Responses\ErrorList;
use SellingPartnerApi\Seller\InvoicesV20240619\Responses\GetInvoicesResponse;

/**
 * getInvoices
 */
class GetInvoices extends Request
{
    protected Method $method = Method::GET;

    /**
     * @param  string  $marketplaceId  The response includes only the invoices that match the specified marketplace.
     * @param  ?string  $transactionIdentifierName  The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the `transactionIdentifierId` field.Use the `getInvoicesAttributes` operation to check `transactionIdentifierName` options.
     * @param  ?int  $pageSize  The maximum number of invoices you want to return in a single call.
     *
     * Minimum: 1
     *
     * Maximum: 200
     * @param  ?\DateTimeInterface  $dateEnd  The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.
     * @param  ?string  $transactionType  The marketplace-specific classification of the transaction type for which the invoice was created. Use the `getInvoicesAttributes` operation to check `transactionType` options.
     * @param  ?string  $transactionIdentifierId  The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the `transactionIdentifierName` field.
     * @param  ?\DateTimeInterface  $dateStart  The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
     * @param  ?string  $series  Return invoices with the specified series number.
     * @param  ?string  $nextToken  The response includes `nextToken` when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.
     * @param  ?string  $sortOrder  Sort the invoices in the response in ascending or descending order.
     * @param  ?string  $invoiceType  The marketplace-specific classification of the invoice type. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
     * @param  ?array  $statuses  A list of statuses that you can use to filter invoices. Use the `getInvoicesAttributes` operation to check invoice status options.
     *
     * Min count: 1
     * @param  ?string  $externalInvoiceId  Return invoices that match this external ID. This is typically the Government Invoice ID.
     * @param  ?string  $sortBy  The attribute by which you want to sort the invoices in the response.
     */
    public function __construct(
        protected string $marketplaceId,
        protected ?string $transactionIdentifierName = null,
        protected ?int $pageSize = null,
        protected ?\DateTimeInterface $dateEnd = null,
        protected ?string $transactionType = null,
        protected ?string $transactionIdentifierId = null,
        protected ?\DateTimeInterface $dateStart = null,
        protected ?string $series = null,
        protected ?string $nextToken = null,
        protected ?string $sortOrder = null,
        protected ?string $invoiceType = null,
        protected ?array $statuses = null,
        protected ?string $externalInvoiceId = null,
        protected ?string $sortBy = null,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/tax/invoices/2024-06-19/invoices';
    }

    public function createDtoFromResponse(Response $response): GetInvoicesResponse|ErrorList
    {
        $status = $response->status();
        $responseCls = match ($status) {
            200 => GetInvoicesResponse::class,
            400, 401, 403, 404, 413, 415, 429, 500, 503 => ErrorList::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultQuery(): array
    {
        return array_filter([
            'marketplaceId' => $this->marketplaceId,
            'transactionIdentifierName' => $this->transactionIdentifierName,
            'pageSize' => $this->pageSize,
            'dateEnd' => $this->dateEnd?->format('Y-m-d\TH:i:s\Z'),
            'transactionType' => $this->transactionType,
            'transactionIdentifierId' => $this->transactionIdentifierId,
            'dateStart' => $this->dateStart?->format('Y-m-d\TH:i:s\Z'),
            'series' => $this->series,
            'nextToken' => $this->nextToken,
            'sortOrder' => $this->sortOrder,
            'invoiceType' => $this->invoiceType,
            'statuses' => $this->statuses,
            'externalInvoiceId' => $this->externalInvoiceId,
            'sortBy' => $this->sortBy,
        ]);
    }
}
