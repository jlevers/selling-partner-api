<?php
/**
 * Buyer
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  SellingPartnerApi
 */

/**
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\ServiceV1;
use ArrayAccess;
use SellingPartnerApi\Model\BaseModel;
use SellingPartnerApi\Model\ModelInterface;
use SellingPartnerApi\ObjectSerializer;

/**
 * Buyer Class Doc Comment
 *
 * @category Class
 * @description Information about the buyer.
 * @package  SellingPartnerApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Buyer extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Buyer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buyer_id' => 'string',
        'name' => 'string',
        'phone' => 'string',
        'is_prime_member' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'buyer_id' => null,
        'name' => null,
        'phone' => null,
        'is_prime_member' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer_id' => 'buyerId',
        'name' => 'name',
        'phone' => 'phone',
        'is_prime_member' => 'isPrimeMember'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer_id' => 'setBuyerId',
        'name' => 'setName',
        'phone' => 'setPhone',
        'is_prime_member' => 'setIsPrimeMember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer_id' => 'getBuyerId',
        'name' => 'getName',
        'phone' => 'getPhone',
        'is_prime_member' => 'getIsPrimeMember'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer_id'] = $data['buyer_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['is_prime_member'] = $data['is_prime_member'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if (!is_null($this->container['buyer_id']) && !preg_match("/^[A-Z0-9]*$/", $this->container['buyer_id'])) {
            $invalidProperties[] = "invalid value for 'buyer_id', must be conform to the pattern /^[A-Z0-9]*$/.";
        }

        return $invalidProperties;
    }


    /**
     * Gets buyer_id
     *
     * @return string|null
     */
    public function getBuyerId()
    {
        return $this->container['buyer_id'];
    }

    /**
     * Sets buyer_id
     *
     * @param string|null $buyer_id The identifier of the buyer.
     *
     * @return self
     */
    public function setBuyerId($buyer_id)
    {

        if (!is_null($buyer_id) && (!preg_match("/^[A-Z0-9]*$/", $buyer_id))) {
            throw new \InvalidArgumentException("invalid value for $buyer_id when calling Buyer., must conform to the pattern /^[A-Z0-9]*$/.");
        }

        $this->container['buyer_id'] = $buyer_id;

        return $this;
    }
    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the buyer.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The phone number of the buyer.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Gets is_prime_member
     *
     * @return bool|null
     */
    public function getIsPrimeMember()
    {
        return $this->container['is_prime_member'];
    }

    /**
     * Sets is_prime_member
     *
     * @param bool|null $is_prime_member When true, the service is for an Amazon Prime buyer.
     *
     * @return self
     */
    public function setIsPrimeMember($is_prime_member)
    {
        $this->container['is_prime_member'] = $is_prime_member;

        return $this;
    }
}


