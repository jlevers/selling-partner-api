<?php
/**
 * TimeSlot
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  SellingPartnerApi
 */

/**
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders. Your Easy Ship applications can: * Get available time slots for packages to be scheduled for delivery. * Schedule, reschedule, and cancel Easy Ship orders. * Print labels, invoices, and warranties. See the [Marketplace Support Table](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support-table) for the differences in Easy Ship operations by marketplace.
 *
 * The version of the OpenAPI document: 2022-03-23
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Model\EasyShipV20220323;
use ArrayAccess;
use SellingPartnerApi\Model\BaseModel;
use SellingPartnerApi\Model\ModelInterface;
use SellingPartnerApi\ObjectSerializer;

/**
 * TimeSlot Class Doc Comment
 *
 * @category Class
 * @description A time window to hand over an Easy Ship package to Amazon Logistics.
 * @package  SellingPartnerApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TimeSlot extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeSlot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'slot_id' => 'string',
        'start_time' => 'string',
        'end_time' => 'string',
        'handover_method' => '\SellingPartnerApi\Model\EasyShipV20220323\HandoverMethod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'slot_id' => null,
        'start_time' => null,
        'end_time' => null,
        'handover_method' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'slot_id' => 'slotId',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'handover_method' => 'handoverMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'slot_id' => 'setSlotId',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'handover_method' => 'setHandoverMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'slot_id' => 'getSlotId',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'handover_method' => 'getHandoverMethod'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['slot_id'] = $data['slot_id'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['handover_method'] = $data['handover_method'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['slot_id'] === null) {
            $invalidProperties[] = "'slot_id' can't be null";
        }
        if ((mb_strlen($this->container['slot_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'slot_id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['slot_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'slot_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }


    /**
     * Gets slot_id
     *
     * @return string
     */
    public function getSlotId()
    {
        return $this->container['slot_id'];
    }

    /**
     * Sets slot_id
     *
     * @param string $slot_id A string of up to 255 characters.
     *
     * @return self
     */
    public function setSlotId($slot_id)
    {
        if ((mb_strlen($slot_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $slot_id when calling TimeSlot., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($slot_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slot_id when calling TimeSlot., must be bigger than or equal to 1.');
        }

        $this->container['slot_id'] = $slot_id;

        return $this;
    }
    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time A datetime value in ISO 8601 format.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }
    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time A datetime value in ISO 8601 format.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }
    /**
     * Gets handover_method
     *
     * @return \SellingPartnerApi\Model\EasyShipV20220323\HandoverMethod|null
     */
    public function getHandoverMethod()
    {
        return $this->container['handover_method'];
    }

    /**
     * Sets handover_method
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\HandoverMethod|null $handover_method handover_method
     *
     * @return self
     */
    public function setHandoverMethod($handover_method)
    {
        $this->container['handover_method'] = $handover_method;

        return $this;
    }
}


