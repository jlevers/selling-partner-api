{
    "openapi": "3.0.1",
    "info": {
        "title": "Selling Partner API for Orders",
        "description": "Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools. \n\n_Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).",
        "contact": {
            "name": "Selling Partner API Developer Support",
            "url": "https://sellercentral.amazon.com/gp/mws/contactus.html"
        },
        "license": {
            "name": "Apache License 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "v0"
    },
    "servers": [
        {
            "url": "https://sellingpartnerapi-na.amazon.com/"
        }
    ],
    "paths": {
        "/orders/v0/orders": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns orders that are created or updated during the specified time period. If you want to return specific types of orders, you can apply filters to your request. `NextToken` doesn't affect any filters that you include in your request; it only impacts the pagination for the filtered orders response. \n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.0167 | 20 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.",
                "operationId": "getOrders",
                "parameters": [
                    {
                        "name": "CreatedAfter",
                        "in": "query",
                        "description": "Use this date to select orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.\n\n**Note**: Either the `CreatedAfter` parameter or the `LastUpdatedAfter` parameter is required. Both cannot be empty. `LastUpdatedAfter` and `LastUpdatedBefore` cannot be set when `CreatedAfter` is set.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CreatedBefore",
                        "in": "query",
                        "description": "Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.\n\n**Note**: `CreatedBefore` is optional when `CreatedAfter` is set. If specified, `CreatedBefore` must be equal to or after the `CreatedAfter` date and at least two minutes before current time.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "LastUpdatedAfter",
                        "in": "query",
                        "description": "Use this date to select orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.\n\n**Note**: Either the `CreatedAfter` parameter or the `LastUpdatedAfter` parameter is required. Both cannot be empty. `CreatedAfter` or `CreatedBefore` cannot be set when `LastUpdatedAfter` is set.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "LastUpdatedBefore",
                        "in": "query",
                        "description": "Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.\n\n**Note**: `LastUpdatedBefore` is optional when `LastUpdatedAfter` is set. But if specified, `LastUpdatedBefore` must be equal to or after the `LastUpdatedAfter` date and at least two minutes before current time.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "OrderStatuses",
                        "in": "query",
                        "description": "A list of `OrderStatus` values used to filter the results.\n\n**Possible values:**\n- `PendingAvailability` (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)\n- `Pending` (The order has been placed but payment has not been authorized.)\n- `Unshipped` (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)\n- `PartiallyShipped` (One or more, but not all, items in the order have been shipped.)\n- `Shipped` (All items in the order have been shipped.)\n- `InvoiceUnconfirmed` (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)\n- `Canceled` (The order has been canceled.)\n- `Unfulfillable` (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "MarketplaceIds",
                        "in": "query",
                        "description": "A list of `MarketplaceId` values. Used to select orders that were placed in the specified marketplaces.\n\nRefer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of `marketplaceId` values.",
                        "required": true,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "maxItems": 50,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "FulfillmentChannels",
                        "in": "query",
                        "description": "A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. \n\n**Possible values**: `AFN` (fulfilled by Amazon), `MFN` (fulfilled by seller).",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "PaymentMethods",
                        "in": "query",
                        "description": "A list of payment method values. Use this field to select orders that were paid with the specified payment methods.\n\n**Possible values**: `COD` (cash on delivery), `CVS` (convenience store), `Other` (Any payment method other than COD or CVS).",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "BuyerEmail",
                        "in": "query",
                        "description": "The email address of a buyer. Used to select orders that contain the specified email address.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "SellerOrderId",
                        "in": "query",
                        "description": "An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If `SellerOrderId` is specified, then `FulfillmentChannels`, `OrderStatuses`, `PaymentMethod`, `LastUpdatedAfter`, LastUpdatedBefore, and `BuyerEmail` cannot be specified.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MaxResultsPerPage",
                        "in": "query",
                        "description": "A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "EasyShipShipmentStatuses",
                        "in": "query",
                        "description": "A list of `EasyShipShipmentStatus` values. Used to select Easy Ship orders with statuses that match the specified values. If `EasyShipShipmentStatus` is specified, only Amazon Easy Ship orders are returned.\n\n**Possible values:**\n- `PendingSchedule` (The package is awaiting the schedule for pick-up.)\n- `PendingPickUp` (Amazon has not yet picked up the package from the seller.)\n- `PendingDropOff` (The seller will deliver the package to the carrier.)\n- `LabelCanceled` (The seller canceled the pickup.)\n- `PickedUp` (Amazon has picked up the package from the seller.)\n- `DroppedOff` (The package is delivered to the carrier by the seller.)\n- `AtOriginFC` (The packaged is at the origin fulfillment center.)\n- `AtDestinationFC` (The package is at the destination fulfillment center.)\n- `Delivered` (The package has been delivered.)\n- `RejectedByBuyer` (The package has been rejected by the buyer.)\n- `Undeliverable` (The package cannot be delivered.)\n- `ReturningToSeller` (The package was not delivered and is being returned to the seller.)\n- `ReturnedToSeller` (The package was not delivered and was returned to the seller.)\n- `Lost` (The package is lost.)\n- `OutForDelivery` (The package is out for delivery.)\n- `Damaged` (The package was damaged by the carrier.)",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "ElectronicInvoiceStatuses",
                        "in": "query",
                        "description": "A list of `ElectronicInvoiceStatus` values. Used to select orders with electronic invoice statuses that match the specified values.\n\n**Possible values:**\n- `NotRequired` (Electronic invoice submission is not required for this order.)\n- `NotFound` (The electronic invoice was not submitted for this order.)\n- `Processing` (The electronic invoice is being processed for this order.)\n- `Errored` (The last submitted electronic invoice was rejected for this order.)\n- `Accepted` (The last submitted electronic invoice was submitted and accepted.)",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "NextToken",
                        "in": "query",
                        "description": "A string token returned in the response of your previous request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "AmazonOrderIds",
                        "in": "query",
                        "description": "A list of `AmazonOrderId` values. An `AmazonOrderId` is an Amazon-defined order identifier, in 3-7-7 format.",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "maxItems": 50,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "ActualFulfillmentSupplySourceId",
                        "in": "query",
                        "description": "The `sourceId` of the location from where you want the order fulfilled.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "IsISPU",
                        "in": "query",
                        "description": "When true, this order is marked to be picked up from a store rather than delivered.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "StoreChainStoreId",
                        "in": "query",
                        "description": "The store chain store identifier. Linked to a specific store in a store chain.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "EarliestDeliveryDateBefore",
                        "in": "query",
                        "description": "Use this date to select orders with a earliest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "EarliestDeliveryDateAfter",
                        "in": "query",
                        "description": "Use this date to select orders with a earliest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "LatestDeliveryDateBefore",
                        "in": "query",
                        "description": "Use this date to select orders with a latest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "LatestDeliveryDateAfter",
                        "in": "query",
                        "description": "Use this date to select orders with a latest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                },
                                "example": {
                                    "payload": {
                                        "NextToken": "2YgYW55IGNhcm5hbCBwbGVhc3VyZS4",
                                        "Orders": [
                                            {
                                                "AmazonOrderId": "902-3159896-1390916",
                                                "PurchaseDate": "2017-01-20T19:49:35Z",
                                                "LastUpdateDate": "2017-01-20T19:49:35Z",
                                                "OrderStatus": "Pending",
                                                "FulfillmentChannel": "SellerFulfilled",
                                                "NumberOfItemsShipped": 0,
                                                "NumberOfItemsUnshipped": 0,
                                                "PaymentMethod": "Other",
                                                "PaymentMethodDetails": [
                                                    "CreditCard",
                                                    "GiftCerificate"
                                                ],
                                                "MarketplaceId": "ATVPDKIKX0DER",
                                                "ShipmentServiceLevelCategory": "Standard",
                                                "OrderType": "StandardOrder",
                                                "EarliestShipDate": "2017-01-20T19:51:16Z",
                                                "LatestShipDate": "2017-01-25T19:49:35Z",
                                                "IsBusinessOrder": false,
                                                "IsPrime": false,
                                                "IsAccessPointOrder": false,
                                                "IsGlobalExpressEnabled": false,
                                                "IsPremiumOrder": false,
                                                "IsSoldByAB": false,
                                                "IsIBA": false,
                                                "ShippingAddress": {
                                                    "Name": "Michigan address",
                                                    "AddressLine1": "1 Cross St.",
                                                    "City": "Canton",
                                                    "StateOrRegion": "MI",
                                                    "PostalCode": "48817",
                                                    "CountryCode": "US"
                                                },
                                                "BuyerInfo": {
                                                    "BuyerEmail": "user@example.com",
                                                    "BuyerName": "John Doe",
                                                    "BuyerTaxInfo": {
                                                        "CompanyLegalName": "A Company Name"
                                                    },
                                                    "PurchaseOrderNumber": "1234567890123"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "CreatedAfter": {
                                                "value": "TEST_CASE_200"
                                            },
                                            "MarketplaceIds": {
                                                "value": [
                                                    "ATVPDKIKX0DER"
                                                ]
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "CreatedBefore": "1.569521782042E9",
                                            "Orders": [
                                                {
                                                    "AmazonOrderId": "902-1845936-5435065",
                                                    "PurchaseDate": "1970-01-19T03:58:30Z",
                                                    "LastUpdateDate": "1970-01-19T03:58:32Z",
                                                    "OrderStatus": "Unshipped",
                                                    "FulfillmentChannel": "MFN",
                                                    "SalesChannel": "Amazon.com",
                                                    "ShipServiceLevel": "Std US D2D Dom",
                                                    "OrderTotal": {
                                                        "CurrencyCode": "USD",
                                                        "Amount": "11.01"
                                                    },
                                                    "NumberOfItemsShipped": 0,
                                                    "NumberOfItemsUnshipped": 1,
                                                    "PaymentMethod": "Other",
                                                    "PaymentMethodDetails": [
                                                        "Standard"
                                                    ],
                                                    "IsReplacementOrder": false,
                                                    "MarketplaceId": "ATVPDKIKX0DER",
                                                    "ShipmentServiceLevelCategory": "Standard",
                                                    "OrderType": "StandardOrder",
                                                    "EarliestShipDate": "1970-01-19T03:59:27Z",
                                                    "LatestShipDate": "1970-01-19T04:05:13Z",
                                                    "EarliestDeliveryDate": "1970-01-19T04:06:39Z",
                                                    "LatestDeliveryDate": "1970-01-19T04:15:17Z",
                                                    "IsBusinessOrder": false,
                                                    "IsPrime": false,
                                                    "IsGlobalExpressEnabled": false,
                                                    "IsPremiumOrder": false,
                                                    "IsSoldByAB": false,
                                                    "IsIBA": false,
                                                    "DefaultShipFromLocationAddress": {
                                                        "Name": "MFNIntegrationTestMerchant",
                                                        "AddressLine1": "2201 WESTLAKE AVE",
                                                        "City": "SEATTLE",
                                                        "StateOrRegion": "WA",
                                                        "PostalCode": "98121-2778",
                                                        "CountryCode": "US",
                                                        "Phone": "+1 480-386-0930 ext. 73824",
                                                        "AddressType": "Commercial"
                                                    },
                                                    "FulfillmentInstruction": {
                                                        "FulfillmentSupplySourceId": "sampleSupplySourceId"
                                                    },
                                                    "IsISPU": false,
                                                    "IsAccessPointOrder": false,
                                                    "AutomatedShippingSettings": {
                                                        "HasAutomatedShippingSettings": false
                                                    },
                                                    "EasyShipShipmentStatus": "PendingPickUp",
                                                    "ElectronicInvoiceStatus": "NotRequired"
                                                },
                                                {
                                                    "AmazonOrderId": "902-8745147-1934268",
                                                    "PurchaseDate": "1970-01-19T03:58:30Z",
                                                    "LastUpdateDate": "1970-01-19T03:58:32Z",
                                                    "OrderStatus": "Unshipped",
                                                    "FulfillmentChannel": "MFN",
                                                    "SalesChannel": "Amazon.com",
                                                    "ShipServiceLevel": "Std US D2D Dom",
                                                    "OrderTotal": {
                                                        "CurrencyCode": "USD",
                                                        "Amount": "11.01"
                                                    },
                                                    "NumberOfItemsShipped": 0,
                                                    "NumberOfItemsUnshipped": 1,
                                                    "PaymentMethod": "Other",
                                                    "PaymentMethodDetails": [
                                                        "Standard"
                                                    ],
                                                    "IsReplacementOrder": false,
                                                    "MarketplaceId": "ATVPDKIKX0DER",
                                                    "ShipmentServiceLevelCategory": "Standard",
                                                    "OrderType": "StandardOrder",
                                                    "EarliestShipDate": "1970-01-19T03:59:27Z",
                                                    "LatestShipDate": "1970-01-19T04:05:13Z",
                                                    "EarliestDeliveryDate": "1970-01-19T04:06:39Z",
                                                    "LatestDeliveryDate": "1970-01-19T04:15:17Z",
                                                    "IsBusinessOrder": false,
                                                    "IsPrime": false,
                                                    "IsAccessPointOrder": false,
                                                    "IsGlobalExpressEnabled": false,
                                                    "IsPremiumOrder": false,
                                                    "IsSoldByAB": false,
                                                    "IsIBA": false,
                                                    "EasyShipShipmentStatus": "PendingPickUp",
                                                    "ElectronicInvoiceStatus": "NotRequired"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "CreatedAfter": {
                                                "value": "TEST_CASE_200_NEXT_TOKEN"
                                            },
                                            "MarketplaceIds": {
                                                "value": [
                                                    "ATVPDKIKX0DER"
                                                ]
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "NextToken": "2YgYW55IGNhcm5hbCBwbGVhc3VyZS4",
                                            "Orders": [
                                                {
                                                    "AmazonOrderId": "902-3159896-1390916",
                                                    "PurchaseDate": "2017-01-20T19:49:35Z",
                                                    "LastUpdateDate": "2017-01-20T19:49:35Z",
                                                    "OrderStatus": "Pending",
                                                    "FulfillmentChannel": "SellerFulfilled",
                                                    "NumberOfItemsShipped": 0,
                                                    "NumberOfItemsUnshipped": 0,
                                                    "PaymentMethod": "Other",
                                                    "PaymentMethodDetails": [
                                                        "CreditCard",
                                                        "GiftCerificate"
                                                    ],
                                                    "MarketplaceId": "ATVPDKIKX0DER",
                                                    "ShipmentServiceLevelCategory": "Standard",
                                                    "OrderType": "StandardOrder",
                                                    "EasyShipShipmentStatus": "PendingPickUp",
                                                    "ElectronicInvoiceStatus": "NotRequired",
                                                    "EarliestShipDate": "2017-01-20T19:51:16Z",
                                                    "LatestShipDate": "2017-01-25T19:49:35Z",
                                                    "IsBusinessOrder": false,
                                                    "IsPrime": false,
                                                    "IsAccessPointOrder": false,
                                                    "IsGlobalExpressEnabled": false,
                                                    "IsPremiumOrder": false,
                                                    "IsSoldByAB": false,
                                                    "IsIBA": false
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "CreatedAfter": {
                                                "value": "TEST_CASE_200_NEXT_TOKEN"
                                            },
                                            "MarketplaceIds": {
                                                "value": [
                                                    "ATVPDKIKX0DER"
                                                ]
                                            },
                                            "NextToken": {
                                                "value": "2YgYW55IGNhcm5hbCBwbGVhc3VyZS4"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "Orders": [
                                                {
                                                    "AmazonOrderId": "902-3159896-1390916",
                                                    "PurchaseDate": "2017-01-20T19:49:35Z",
                                                    "LastUpdateDate": "2017-01-20T19:49:35Z",
                                                    "OrderStatus": "Pending",
                                                    "FulfillmentChannel": "SellerFulfilled",
                                                    "NumberOfItemsShipped": 0,
                                                    "NumberOfItemsUnshipped": 0,
                                                    "PaymentMethod": "Other",
                                                    "PaymentMethodDetails": [
                                                        "CreditCard",
                                                        "GiftCerificate"
                                                    ],
                                                    "MarketplaceId": "ATVPDKIKX0DER",
                                                    "ShipmentServiceLevelCategory": "Standard",
                                                    "OrderType": "StandardOrder",
                                                    "EasyShipShipmentStatus": "PendingPickUp",
                                                    "ElectronicInvoiceStatus": "NotRequired",
                                                    "EarliestShipDate": "2017-01-20T19:51:16Z",
                                                    "LatestShipDate": "2017-01-25T19:49:35Z",
                                                    "IsBusinessOrder": false,
                                                    "IsPrime": false,
                                                    "IsAccessPointOrder": false,
                                                    "IsGlobalExpressEnabled": false,
                                                    "IsPremiumOrder": false,
                                                    "IsSoldByAB": false,
                                                    "IsIBA": false
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "CreatedAfter": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrdersResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns the order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                },
                                "example": {
                                    "payload": {
                                        "AmazonOrderId": "902-3159896-1390916",
                                        "PurchaseDate": "2017-01-20T19:49:35Z",
                                        "LastUpdateDate": "2017-01-20T19:49:35Z",
                                        "OrderStatus": "Pending",
                                        "FulfillmentChannel": "SellerFulfilled",
                                        "NumberOfItemsShipped": 0,
                                        "NumberOfItemsUnshipped": 0,
                                        "PaymentMethod": "Other",
                                        "PaymentMethodDetails": [
                                            "CreditCard",
                                            "GiftCerificate"
                                        ],
                                        "MarketplaceId": "ATVPDKIKX0DER",
                                        "ShipmentServiceLevelCategory": "Standard",
                                        "OrderType": "StandardOrder",
                                        "EarliestShipDate": "2017-01-20T19:51:16Z",
                                        "LatestShipDate": "2017-01-25T19:49:35Z",
                                        "IsBusinessOrder": false,
                                        "IsPrime": false,
                                        "IsGlobalExpressEnabled": false,
                                        "IsPremiumOrder": false,
                                        "IsSoldByAB": false,
                                        "IsIBA": false,
                                        "DefaultShipFromLocationAddress": {
                                            "Name": "MFNIntegrationTestMerchant",
                                            "AddressLine1": "2201 WESTLAKE AVE",
                                            "City": "SEATTLE",
                                            "StateOrRegion": "WA",
                                            "PostalCode": "98121-2778",
                                            "CountryCode": "US",
                                            "Phone": "+1 480-386-0930 ext. 73824",
                                            "AddressType": "Commercial"
                                        },
                                        "FulfillmentInstruction": {
                                            "FulfillmentSupplySourceId": "sampleSupplySourceId"
                                        },
                                        "IsISPU": false,
                                        "IsAccessPointOrder": false,
                                        "ShippingAddress": {
                                            "Name": "Michigan address",
                                            "AddressLine1": "1 Cross St.",
                                            "City": "Canton",
                                            "StateOrRegion": "MI",
                                            "PostalCode": "48817",
                                            "CountryCode": "US"
                                        },
                                        "BuyerInfo": {
                                            "BuyerEmail": "user@example.com",
                                            "BuyerName": "John Doe",
                                            "BuyerTaxInfo": {
                                                "CompanyLegalName": "A Company Name"
                                            },
                                            "PurchaseOrderNumber": "1234567890123"
                                        },
                                        "AutomatedShippingSettings": {
                                            "HasAutomatedShippingSettings": false
                                        }
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-1845936-5435065",
                                            "PurchaseDate": "1970-01-19T03:58:30Z",
                                            "LastUpdateDate": "1970-01-19T03:58:32Z",
                                            "OrderStatus": "Unshipped",
                                            "FulfillmentChannel": "MFN",
                                            "SalesChannel": "Amazon.com",
                                            "ShipServiceLevel": "Std US D2D Dom",
                                            "OrderTotal": {
                                                "CurrencyCode": "USD",
                                                "Amount": "11.01"
                                            },
                                            "NumberOfItemsShipped": 0,
                                            "NumberOfItemsUnshipped": 1,
                                            "PaymentMethod": "Other",
                                            "PaymentMethodDetails": [
                                                "Standard"
                                            ],
                                            "IsReplacementOrder": false,
                                            "MarketplaceId": "ATVPDKIKX0DER",
                                            "ShipmentServiceLevelCategory": "Standard",
                                            "OrderType": "StandardOrder",
                                            "EarliestShipDate": "1970-01-19T03:59:27Z",
                                            "LatestShipDate": "1970-01-19T04:05:13Z",
                                            "EarliestDeliveryDate": "1970-01-19T04:06:39Z",
                                            "LatestDeliveryDate": "1970-01-19T04:15:17Z",
                                            "IsBusinessOrder": false,
                                            "IsPrime": false,
                                            "IsGlobalExpressEnabled": false,
                                            "IsPremiumOrder": false,
                                            "IsSoldByAB": false,
                                            "IsIBA": false,
                                            "DefaultShipFromLocationAddress": {
                                                "Name": "MFNIntegrationTestMerchant",
                                                "AddressLine1": "2201 WESTLAKE AVE",
                                                "City": "SEATTLE",
                                                "StateOrRegion": "WA",
                                                "PostalCode": "98121-2778",
                                                "CountryCode": "US",
                                                "Phone": "+1 480-386-0930 ext. 73824",
                                                "AddressType": "Commercial"
                                            },
                                            "FulfillmentInstruction": {
                                                "FulfillmentSupplySourceId": "sampleSupplySourceId"
                                            },
                                            "IsISPU": false,
                                            "IsAccessPointOrder": false,
                                            "AutomatedShippingSettings": {
                                                "HasAutomatedShippingSettings": false
                                            },
                                            "EasyShipShipmentStatus": "PendingPickUp",
                                            "ElectronicInvoiceStatus": "NotRequired"
                                        }
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_IBA_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "921-3175655-0452641",
                                            "PurchaseDate": "2019-05-07T15:42:57.058Z",
                                            "LastUpdateDate": "2019-05-08T21:59:59Z",
                                            "OrderStatus": "Shipped",
                                            "FulfillmentChannel": "AFN",
                                            "SalesChannel": "Amazon.de",
                                            "ShipServiceLevel": "Standard",
                                            "OrderTotal": {
                                                "CurrencyCode": "EUR",
                                                "Amount": "100.00"
                                            },
                                            "NumberOfItemsShipped": 1,
                                            "NumberOfItemsUnshipped": 0,
                                            "PaymentMethod": "Other",
                                            "PaymentMethodDetails": [
                                                "Invoice"
                                            ],
                                            "IsReplacementOrder": false,
                                            "MarketplaceId": "A1PA6795UKMFR9",
                                            "ShipmentServiceLevelCategory": "Standard",
                                            "OrderType": "StandardOrder",
                                            "EarliestShipDate": "1970-01-19T03:59:27Z",
                                            "LatestShipDate": "2019-05-08T21:59:59Z",
                                            "EarliestDeliveryDate": "2019-05-10T21:59:59Z",
                                            "LatestDeliveryDate": "2019-05-12T21:59:59Z",
                                            "IsBusinessOrder": true,
                                            "IsPrime": false,
                                            "IsGlobalExpressEnabled": false,
                                            "IsPremiumOrder": false,
                                            "IsSoldByAB": true,
                                            "IsIBA": true,
                                            "DefaultShipFromLocationAddress": {
                                                "Name": "MFNIntegrationTestMerchant",
                                                "AddressLine1": "2201 WESTLAKE AVE",
                                                "City": "SEATTLE",
                                                "StateOrRegion": "WA",
                                                "PostalCode": "98121-2778",
                                                "CountryCode": "US",
                                                "Phone": "+1 480-386-0930 ext. 73824",
                                                "AddressType": "Commercial"
                                            },
                                            "FulfillmentInstruction": {
                                                "FulfillmentSupplySourceId": "sampleSupplySourceId"
                                            },
                                            "IsISPU": false,
                                            "IsAccessPointOrder": false,
                                            "AutomatedShippingSettings": {
                                                "HasAutomatedShippingSettings": false
                                            },
                                            "EasyShipShipmentStatus": "PendingPickUp",
                                            "ElectronicInvoiceStatus": "NotRequired"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}/buyerInfo": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns buyer information for the order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrderBuyerInfo",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An `orderId` is an Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                },
                                "example": {
                                    "payload": {
                                        "AmazonOrderId": "902-3159896-1390916",
                                        "BuyerEmail": "user@example.com",
                                        "BuyerName": "John Smith",
                                        "BuyerTaxInfo": {
                                            "CompanyLegalName": "Company Name"
                                        },
                                        "PurchaseOrderNumber": "1234567890123"
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-1845936-5435065",
                                            "BuyerEmail": "fzyrv6gwkhbb15c@example.com",
                                            "BuyerName": "MFNIntegrationTestMerchant"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderBuyerInfoResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}/address": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns the shipping address for the order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrderAddress",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An `orderId` is an Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                },
                                "example": {
                                    "payload": {
                                        "AmazonOrderId": "902-3159896-1390916",
                                        "ShippingAddress": {
                                            "Name": "Michigan address",
                                            "AddressLine1": "1 cross st",
                                            "City": "Canton",
                                            "StateOrRegion": "MI",
                                            "PostalCode": "48817",
                                            "CountryCode": "US"
                                        }
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-1845936-5435065",
                                            "ShippingAddress": {
                                                "Name": "MFNIntegrationTestMerchant",
                                                "AddressLine1": "2201 WESTLAKE AVE",
                                                "City": "SEATTLE",
                                                "StateOrRegion": "WA",
                                                "PostalCode": "98121-2778",
                                                "CountryCode": "US",
                                                "Phone": "+1 480-386-0930 ext. 73824",
                                                "AddressType": "Commercial"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderAddressResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}/orderItems": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns detailed order item information for the order that you specify. If `NextToken` is provided, it's used to retrieve the next page of order items.\n\n__Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrderItems",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "NextToken",
                        "in": "query",
                        "description": "A string token returned in the response of your previous request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                },
                                "example": {
                                    "payload": {
                                        "AmazonOrderId": "903-1671087-0812628",
                                        "NextToken": "2YgYW55IGNhcm5hbCBwbGVhc3VyZS4",
                                        "OrderItems": [
                                            {
                                                "ASIN": "BT0093TELA",
                                                "OrderItemId": "68828574383266",
                                                "SellerSKU": "CBA_OTF_1",
                                                "Title": "Example item name",
                                                "QuantityOrdered": 1,
                                                "QuantityShipped": 1,
                                                "PointsGranted": {
                                                    "PointsNumber": 10,
                                                    "PointsMonetaryValue": {
                                                        "CurrencyCode": "JPY",
                                                        "Amount": "10.00"
                                                    }
                                                },
                                                "ItemPrice": {
                                                    "CurrencyCode": "JPY",
                                                    "Amount": "25.99"
                                                },
                                                "ShippingPrice": {
                                                    "CurrencyCode": "JPY",
                                                    "Amount": "1.26"
                                                },
                                                "ScheduledDeliveryEndDate": "2013-09-09T01:30:00Z",
                                                "ScheduledDeliveryStartDate": "2013-09-07T02:00:00Z",
                                                "CODFee": {
                                                    "CurrencyCode": "JPY",
                                                    "Amount": "10.00"
                                                },
                                                "CODFeeDiscount": {
                                                    "CurrencyCode": "JPY",
                                                    "Amount": "1.00"
                                                },
                                                "PriceDesignation": "BusinessPrice",
                                                "BuyerInfo": {
                                                    "BuyerCustomizedInfo": {
                                                        "CustomizedURL": "https://zme-caps.amazon.com/t/bR6qHkzSOxuB/J8nbWhze0Bd3DkajkOdY-XQbWkFralegp2sr_QZiKEE/1"
                                                    },
                                                    "GiftMessageText": "For you!",
                                                    "GiftWrapPrice": {
                                                        "CurrencyCode": "GBP",
                                                        "Amount": "41.99"
                                                    },
                                                    "GiftWrapLevel": "Classic"
                                                },
                                                "BuyerRequestedCancel": {
                                                    "IsBuyerRequestedCancel": "true",
                                                    "BuyerCancelReason": "Found cheaper somewhere else."
                                                },
                                                "SerialNumbers": [
                                                    "854"
                                                ]
                                            },
                                            {
                                                "ASIN": "BCTU1104UEFB",
                                                "OrderItemId": "79039765272157",
                                                "SellerSKU": "CBA_OTF_5",
                                                "Title": "Example item name",
                                                "QuantityOrdered": 2,
                                                "ItemPrice": {
                                                    "CurrencyCode": "JPY",
                                                    "Amount": "17.95"
                                                },
                                                "PromotionIds": [
                                                    "FREESHIP"
                                                ],
                                                "ConditionId": "Used",
                                                "ConditionSubtypeId": "Mint",
                                                "ConditionNote": "Example ConditionNote",
                                                "PriceDesignation": "BusinessPrice",
                                                "BuyerInfo": {
                                                    "BuyerCustomizedInfo": {
                                                        "CustomizedURL": "https://zme-caps.amazon.com/t/bR6qHkzSOxuB/J8nbWhze0Bd3DkajkOdY-XQbWkFralegp2sr_QZiKEE/1"
                                                    },
                                                    "GiftMessageText": "For you!",
                                                    "GiftWrapPrice": {
                                                        "CurrencyCode": "JPY",
                                                        "Amount": "1.99"
                                                    },
                                                    "GiftWrapLevel": "Classic"
                                                },
                                                "BuyerRequestedCancel": {
                                                    "IsBuyerRequestedCancel": "true",
                                                    "BuyerCancelReason": "Found cheaper somewhere else."
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-1845936-5435065",
                                            "OrderItems": [
                                                {
                                                    "ASIN": "B00551Q3CS",
                                                    "OrderItemId": "05015851154158",
                                                    "SellerSKU": "NABetaASINB00551Q3CS",
                                                    "Title": "B00551Q3CS [Card Book]",
                                                    "QuantityOrdered": 1,
                                                    "QuantityShipped": 0,
                                                    "ProductInfo": {
                                                        "NumberOfItems": "1"
                                                    },
                                                    "ItemPrice": {
                                                        "CurrencyCode": "USD",
                                                        "Amount": "10.00"
                                                    },
                                                    "ItemTax": {
                                                        "CurrencyCode": "USD",
                                                        "Amount": "1.01"
                                                    },
                                                    "PromotionDiscount": {
                                                        "CurrencyCode": "USD",
                                                        "Amount": "0.00"
                                                    },
                                                    "IsGift": "false",
                                                    "ConditionId": "New",
                                                    "ConditionSubtypeId": "New",
                                                    "IsTransparency": false,
                                                    "SerialNumberRequired": false,
                                                    "IossNumber": "",
                                                    "DeemedResellerCategory": "IOSS",
                                                    "StoreChainStoreId": "ISPU_StoreId",
                                                    "BuyerRequestedCancel": {
                                                        "IsBuyerRequestedCancel": "true",
                                                        "BuyerCancelReason": "Found cheaper somewhere else."
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}/orderItems/buyerInfo": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns buyer information for the order items in the order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrderItemsBuyerInfo",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "NextToken",
                        "in": "query",
                        "description": "A string token returned in the response of your previous request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                },
                                "example": {
                                    "payload": {
                                        "OrderItemId": "903-1671087-0812628",
                                        "BuyerCustomizedInfo": {
                                            "CustomizedURL": "https://zme-caps.amazon.com/t/bR6qHkzSOxuB/J8nbWhze0Bd3DkajkOdY-XQbWkFralegp2sr_QZiKEE/1"
                                        },
                                        "GiftMessageText": "For you!",
                                        "GiftWrapPrice": {
                                            "CurrencyCode": "JPY",
                                            "Amount": "1.99"
                                        },
                                        "GiftWrapLevel": "Classic"
                                    }
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_200"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-1845936-5435065",
                                            "OrderItems": [
                                                {
                                                    "BuyerCustomizedInfo": {
                                                        "CustomizedURL": "https://zme-caps.amazon.com/t/bR6qHkzSOxuB/J8nbWhze0Bd3DkajkOdY-XQbWkFralegp2sr_QZiKEE/1"
                                                    },
                                                    "GiftMessageText": "Et toi!",
                                                    "GiftWrapPrice": {
                                                        "CurrencyCode": "JPY",
                                                        "Amount": "1.99"
                                                    },
                                                    "GiftWrapLevel": "Classic"
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderItemsBuyerInfoResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/v0/orders/{orderId}/shipment": {
            "post": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Update the shipment status for an order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 5 | 15 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "updateShipmentStatus",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request body for the `updateShipmentStatus` operation.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateShipmentStatusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {},
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {}
                                    },
                                    "response": {}
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "body": {
                                                "value": {
                                                    "marketplaceId": "1",
                                                    "shipmentStatus": "ReadyForPickup"
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Marketplace ID is not defined",
                                                "details": "1001"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "The request size exceeded the maximum accepted size.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The request payload is in an unsupported format.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateShipmentStatusErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "payload"
            }
        },
        "/orders/v0/orders/{orderId}/regulatedInfo": {
            "get": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Returns regulated information for the order that you specify.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "getOrderRegulatedInfo",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-3159896-1390916",
                                            "RequiresDosageLabel": false,
                                            "RegulatedInformation": {
                                                "Fields": [
                                                    {
                                                        "FieldId": "pet_prescription_name",
                                                        "FieldLabel": "Name",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Ruffus"
                                                    },
                                                    {
                                                        "FieldId": "pet_prescription_species",
                                                        "FieldLabel": "Species",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Dog"
                                                    }
                                                ]
                                            },
                                            "RegulatedOrderVerificationStatus": {
                                                "Status": "Pending",
                                                "RequiresMerchantAction": true,
                                                "ValidRejectionReasons": [
                                                    {
                                                        "RejectionReasonId": "shield_pom_vps_reject_product",
                                                        "RejectionReasonDescription": "This medicine is not suitable for your pet."
                                                    },
                                                    {
                                                        "RejectionReasonId": "shield_pom_vps_reject_age",
                                                        "RejectionReasonDescription": "Your pet is too young for this medicine."
                                                    },
                                                    {
                                                        "RejectionReasonId": "shield_pom_vps_reject_incorrect_weight",
                                                        "RejectionReasonDescription": "Your pet's weight does not match ordered size."
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-2592119-3531015"
                                            }
                                        }
                                    },
                                    "response": {
                                        "payload": {
                                            "AmazonOrderId": "902-2592119-3531015",
                                            "RequiresDosageLabel": false,
                                            "RegulatedInformation": {
                                                "Fields": [
                                                    {
                                                        "FieldId": "pets_rx_scName",
                                                        "FieldLabel": "Pet name",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Woofer"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scType",
                                                        "FieldLabel": "Pet type",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Dog"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scBreed",
                                                        "FieldLabel": "Pet breed",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Husky"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scGender",
                                                        "FieldLabel": "Pet gender",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Female"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scDateOfBirth",
                                                        "FieldLabel": "Pet Birth Date",
                                                        "FieldType": "Text",
                                                        "FieldValue": "2016-05-01"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scWeight",
                                                        "FieldLabel": "Weight",
                                                        "FieldType": "Text",
                                                        "FieldValue": "12"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scWeightUnit",
                                                        "FieldLabel": "Weight Unit",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Pound"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scHasAllergies",
                                                        "FieldLabel": "Does your pet have allergies?",
                                                        "FieldType": "Text",
                                                        "FieldValue": "False"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scTakesAdditionalMedications",
                                                        "FieldLabel": "Is your pet on any other medication?",
                                                        "FieldType": "Text",
                                                        "FieldValue": "False"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scHasOtherProblems",
                                                        "FieldLabel": "Any pet health problems?",
                                                        "FieldType": "Text",
                                                        "FieldValue": "False"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scSourceClinicId",
                                                        "FieldLabel": "Source Clinic ID",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Clinic-1234"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scVetClinicName",
                                                        "FieldLabel": "Vet Clinic Name",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Test Clinic"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scVetClinicCity",
                                                        "FieldLabel": "Vet Clinic City",
                                                        "FieldType": "Text",
                                                        "FieldValue": "Seattle"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scVetClinicState",
                                                        "FieldLabel": "Vet Clinic State",
                                                        "FieldType": "Text",
                                                        "FieldValue": "WA"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scVetClinicZipCode",
                                                        "FieldLabel": "Vet Clinic Zip Code",
                                                        "FieldType": "Text",
                                                        "FieldValue": "98000"
                                                    },
                                                    {
                                                        "FieldId": "pets_rx_scVetClinicPhoneNumber",
                                                        "FieldLabel": "Vet Clinic Phone Number",
                                                        "FieldType": "Text",
                                                        "FieldValue": "2060000000"
                                                    }
                                                ]
                                            },
                                            "RegulatedOrderVerificationStatus": {
                                                "Status": "Pending",
                                                "RequiresMerchantAction": true,
                                                "ValidRejectionReasons": [
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_incorrect_product",
                                                        "RejectionReasonDescription": "Canceled order due to veterinarian indicating wrong product ordered"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_no_vcpr",
                                                        "RejectionReasonDescription": "Canceled order due to veterinarian indicating they do not have you as their client"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_visit_required",
                                                        "RejectionReasonDescription": "Canceled order due to veterinarian indicating they need to see your pet for an appointment"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_wrx_required",
                                                        "RejectionReasonDescription": "Canceled order due to veterinarian policy requiring you pick up a written prescription and mail to pharmacy"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_other",
                                                        "RejectionReasonDescription": "Canceled order due to prescription denied - contact your vetinarian"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_therapy_change",
                                                        "RejectionReasonDescription": "Canceled order due to a change in therapy, follow up with your veterinarian"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_wrong_weight",
                                                        "RejectionReasonDescription": "Canceled order due to incorrect pet weight on file, update weight and replace order or order correct product"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_early_refill",
                                                        "RejectionReasonDescription": "Canceled due to refilling prescription order too soon"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_wrong_species",
                                                        "RejectionReasonDescription": "Canceled due to ordering for wrong pet species, replace order for correct product"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_duplicate",
                                                        "RejectionReasonDescription": "Canceled due to duplicate order identified"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_invalid_rx",
                                                        "RejectionReasonDescription": "Canceled due to not receiving a valid prescription"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_address_validation_error",
                                                        "RejectionReasonDescription": "Canceled due to a non-verified address, correct address and replace order"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_no_clinic_match",
                                                        "RejectionReasonDescription": "Canceled due to no valid clinic match, provide complete and accurate details for vet clinic and replace order"
                                                    },
                                                    {
                                                        "RejectionReasonId": "pets_rx_sc_pharmacist_canceled",
                                                        "RejectionReasonDescription": "Order canceled by pharmacy"
                                                    }
                                                ],
                                                "ValidVerificationDetails": [
                                                    {
                                                        "VerificationDetailType": "prescriptionDetail",
                                                        "ValidVerificationStatuses": [
                                                            "Approved"
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "TEST_CASE_400"
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderRegulatedInfoResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Updates (approves or rejects) the verification status of an order containing regulated products.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 0.5 | 30 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "updateVerificationStatus",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request body for the `updateVerificationStatus` operation.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateVerificationStatusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {},
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "status": "Rejected",
                                                        "externalReviewerId": "reviewer1234",
                                                        "rejectionReasonId": "shield_pom_vps_reject_incorrect_weight"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {}
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "externalReviewerId": "reviewer1234",
                                                        "verificationDetails": {
                                                            "prescriptionDetail": {
                                                                "prescriptionId": "Rx-1234",
                                                                "expirationDate": "2024-01-01T00:00:00Z",
                                                                "writtenQuantity": 3,
                                                                "totalRefillsAuthorized": 10,
                                                                "usageInstructions": "Take one per day by mouth with food",
                                                                "refillsRemaining": 10,
                                                                "clinicId": "ABC-1234"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {}
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "status": "Rejected"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Missing request parameter: rejectionReasonId."
                                            },
                                            {
                                                "code": "InvalidInput",
                                                "message": "Missing request parameter: externalReviewerId."
                                            }
                                        ]
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "status": "Cancelled",
                                                        "externalReviewerId": "reviewer1234"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Invalid request parameter `status`. Must be one of [Approved, Rejected]."
                                            }
                                        ]
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "status": "Rejected",
                                                        "rejectionReasonId": "shield_pom_vps_reject_incorrect_weight",
                                                        "verificationDetails": {
                                                            "prescriptionDetail": {
                                                                "prescriptionId": "Rx-1234",
                                                                "expirationDate": "2024-01-01T00:00:00Z",
                                                                "writtenQuantity": 3,
                                                                "totalRefillsAuthorized": 10,
                                                                "usageInstructions": "Take one per day by mouth with food",
                                                                "refillsRemaining": 10,
                                                                "clinicId": "ABC-1234"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Verification Detail `prescriptionDetail` is not supported when order is in Rejected status."
                                            },
                                            {
                                                "code": "InvalidInput",
                                                "message": "Missing request parameter: externalReviewerId."
                                            }
                                        ]
                                    }
                                },
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-3159896-1390916"
                                            },
                                            "body": {
                                                "value": {
                                                    "regulatedOrderVerificationStatus": {
                                                        "externalReviewerId": "reviewer1234",
                                                        "verificationDetails": {
                                                            "prescriptionDetail": {
                                                                "prescriptionId": "Rx-1234",
                                                                "expirationDate": "2024-01-01T00:00:00Z",
                                                                "writtenQuantity": 3,
                                                                "totalRefillsAuthorized": 10,
                                                                "usageInstructions": "Take one per day by mouth with food",
                                                                "refillsRemaining": 10
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "InvalidInput",
                                                "message": "Missing required parameter(s) from prescriptionDetail value: clinicId"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource specified does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "The request size exceeded the maximum accepted size.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The request payload is in an unsupported format.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateVerificationStatusErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "payload"
            }
        },
        "/orders/v0/orders/{orderId}/shipmentConfirmation": {
            "post": {
                "tags": [
                    "OrdersV0"
                ],
                "description": "Updates the shipment confirmation status for a specified order.\n\n**Usage Plan:**\n\n| Rate (requests per second) | Burst |\n| ---- | ---- |\n| 2 | 10 |\n\nThe `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).",
                "operationId": "confirmShipment",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body of `confirmShipment`.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmShipmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {},
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-1106328-1059050"
                                            },
                                            "body": {
                                                "value": {
                                                    "marketplaceId": "ATVPDKIKX0DER",
                                                    "packageDetail": {
                                                        "packageReferenceId": "1",
                                                        "carrierCode": "FedEx",
                                                        "carrierName": "FedEx",
                                                        "shippingMethod": "FedEx Ground",
                                                        "trackingNumber": "112345678",
                                                        "shipDate": "2022-02-11T01:00:00.000Z",
                                                        "shipFromSupplySourceId": "057d3fcc-b750-419f-bbcd-4d340c60c430",
                                                        "orderItems": [
                                                            {
                                                                "orderItemId": "79039765272157",
                                                                "quantity": 1,
                                                                "transparencyCodes": [
                                                                    "09876543211234567890"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {}
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Request has missing or invalid parameters and cannot be parsed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        },
                        "x-amzn-api-sandbox": {
                            "static": [
                                {
                                    "request": {
                                        "parameters": {
                                            "orderId": {
                                                "value": "902-1106328-1059050"
                                            },
                                            "body": {
                                                "value": {
                                                    "marketplaceId": "ATVPDKIKX0DER",
                                                    "packageDetail": {
                                                        "packageReferenceId": "1",
                                                        "carrierCode": "FedEx",
                                                        "carrierName": "FedEx",
                                                        "shippingMethod": "FedEx Ground",
                                                        "trackingNumber": "112345678",
                                                        "shipDate": "02/21/2022",
                                                        "shipFromSupplySourceId": "057d3fcc-b750-419f-bbcd-4d340c60c430",
                                                        "orderItems": [
                                                            {
                                                                "orderItemId": "79039765272157",
                                                                "quantity": 1,
                                                                "transparencyCodes": [
                                                                    "09876543211234567890"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "response": {
                                        "errors": [
                                            {
                                                "code": "Invalid Input",
                                                "message": "Invalid Input"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The specified resource does not exist.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "x-amzn-RateLimit-Limit": {
                                "description": "Your rate limit (requests per second) for this operation.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "The frequency of requests was greater than allowed.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected condition occurred that prevented the server from fulfilling the request.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Temporary overloading or maintenance of the server.",
                        "headers": {
                            "x-amzn-RequestId": {
                                "description": "Unique request reference identifier.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfirmShipmentErrorResponse"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "payload"
            }
        }
    },
    "components": {
        "schemas": {
            "UpdateShipmentStatusRequest": {
                "required": [
                    "marketplaceId",
                    "shipmentStatus"
                ],
                "type": "object",
                "properties": {
                    "marketplaceId": {
                        "$ref": "#/components/schemas/MarketplaceId"
                    },
                    "shipmentStatus": {
                        "$ref": "#/components/schemas/ShipmentStatus"
                    },
                    "orderItems": {
                        "$ref": "#/components/schemas/OrderItems"
                    }
                },
                "description": "The request body for the `updateShipmentStatus` operation."
            },
            "UpdateVerificationStatusRequest": {
                "required": [
                    "regulatedOrderVerificationStatus"
                ],
                "type": "object",
                "properties": {
                    "regulatedOrderVerificationStatus": {
                        "$ref": "#/components/schemas/UpdateVerificationStatusRequestBody"
                    }
                },
                "description": "The request body for the `updateVerificationStatus` operation."
            },
            "UpdateVerificationStatusRequestBody": {
                "required": [
                    "externalReviewerId"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/VerificationStatus"
                    },
                    "externalReviewerId": {
                        "type": "string",
                        "description": "The identifier of the order's regulated information reviewer."
                    },
                    "rejectionReasonId": {
                        "type": "string",
                        "description": "The unique identifier of the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected."
                    },
                    "verificationDetails": {
                        "$ref": "#/components/schemas/VerificationDetails"
                    }
                },
                "description": "The updated values of the `VerificationStatus` field."
            },
            "MarketplaceId": {
                "type": "string",
                "description": "The unobfuscated marketplace identifier."
            },
            "ShipmentStatus": {
                "type": "string",
                "description": "The shipment status to apply.",
                "enum": [
                    "ReadyForPickup",
                    "PickedUp",
                    "RefusedPickup"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "ReadyForPickup",
                        "description": "Ready for pickup."
                    },
                    {
                        "value": "PickedUp",
                        "description": "Picked up."
                    },
                    {
                        "value": "RefusedPickup",
                        "description": "Refused pickup."
                    }
                ]
            },
            "OrderItems": {
                "type": "array",
                "description": "For partial shipment status updates, the list of order items and quantities to be updated.",
                "items": {
                    "type": "object",
                    "properties": {
                        "orderItemId": {
                            "type": "string",
                            "description": "The order item's unique identifier."
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "The quantity for which to update the shipment status."
                        }
                    }
                }
            },
            "UpdateShipmentStatusErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The error response schema for the `UpdateShipmentStatus` operation."
            },
            "UpdateVerificationStatusErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The error response schema for the `UpdateVerificationStatus` operation."
            },
            "GetOrdersResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrdersList"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrders` operation."
            },
            "GetOrderResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrder` operation."
            },
            "GetOrderBuyerInfoResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrderBuyerInfo"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrderBuyerInfo` operation."
            },
            "GetOrderRegulatedInfoResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrderRegulatedInfo"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrderRegulatedInfo` operation."
            },
            "GetOrderAddressResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrderAddress"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrderAddress` operation."
            },
            "GetOrderItemsResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrderItemsList"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrderItems` operation."
            },
            "GetOrderItemsBuyerInfoResponse": {
                "type": "object",
                "properties": {
                    "payload": {
                        "$ref": "#/components/schemas/OrderItemsBuyerInfoList"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The response schema for the `getOrderItemsBuyerInfo` operation."
            },
            "OrdersList": {
                "required": [
                    "Orders"
                ],
                "type": "object",
                "properties": {
                    "Orders": {
                        "$ref": "#/components/schemas/OrderList"
                    },
                    "NextToken": {
                        "type": "string",
                        "description": "When present and not empty, pass this string token in the next request to return the next response page."
                    },
                    "LastUpdatedBefore": {
                        "type": "string",
                        "description": "Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format."
                    },
                    "CreatedBefore": {
                        "type": "string",
                        "description": "Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format."
                    }
                },
                "description": "A list of orders along with additional information to make subsequent API calls."
            },
            "OrderList": {
                "type": "array",
                "description": "A list of orders.",
                "items": {
                    "$ref": "#/components/schemas/Order"
                }
            },
            "Order": {
                "required": [
                    "AmazonOrderId",
                    "LastUpdateDate",
                    "OrderStatus",
                    "PurchaseDate"
                ],
                "type": "object",
                "properties": {
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    },
                    "SellerOrderId": {
                        "type": "string",
                        "description": "A seller-defined order identifier."
                    },
                    "PurchaseDate": {
                        "type": "string",
                        "description": "The date when the order was created."
                    },
                    "LastUpdateDate": {
                        "type": "string",
                        "description": "The date when the order was last updated.\n\n__Note__: `LastUpdateDate` is returned with an incorrect date for orders that were last updated before 2009-04-01."
                    },
                    "OrderStatus": {
                        "type": "string",
                        "description": "The current order status.",
                        "enum": [
                            "Pending",
                            "Unshipped",
                            "PartiallyShipped",
                            "Shipped",
                            "Canceled",
                            "Unfulfillable",
                            "InvoiceUnconfirmed",
                            "PendingAvailability"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "Pending",
                                "description": "The order has been placed but payment has not been authorized. The order is not ready for shipment. Note that for orders with `OrderType = Standard`, the initial order status is Pending. For orders with `OrderType = Preorder`, the initial order status is `PendingAvailability`, and the order passes into the Pending status when the payment authorization process begins."
                            },
                            {
                                "value": "Unshipped",
                                "description": "Payment has been authorized and order is ready for shipment, but no items in the order have been shipped."
                            },
                            {
                                "value": "PartiallyShipped",
                                "description": "One or more (but not all) items in the order have been shipped."
                            },
                            {
                                "value": "Shipped",
                                "description": "All items in the order have been shipped."
                            },
                            {
                                "value": "Canceled",
                                "description": "The order was canceled."
                            },
                            {
                                "value": "Unfulfillable",
                                "description": "The order cannot be fulfilled. This state applies only to Amazon-fulfilled orders that were not placed on Amazon's retail web site."
                            },
                            {
                                "value": "InvoiceUnconfirmed",
                                "description": "All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer."
                            },
                            {
                                "value": "PendingAvailability",
                                "description": "This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date for the item is in the future. The order is not ready for shipment."
                            }
                        ]
                    },
                    "FulfillmentChannel": {
                        "type": "string",
                        "description": "Whether the order was fulfilled by Amazon (`AFN`) or by the seller (`MFN`).",
                        "enum": [
                            "MFN",
                            "AFN"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "MFN",
                                "description": "Fulfilled by the seller."
                            },
                            {
                                "value": "AFN",
                                "description": "Fulfilled by Amazon."
                            }
                        ]
                    },
                    "SalesChannel": {
                        "type": "string",
                        "description": "The sales channel for the first item in the order."
                    },
                    "OrderChannel": {
                        "type": "string",
                        "description": "The order channel for the first item in the order."
                    },
                    "ShipServiceLevel": {
                        "type": "string",
                        "description": "The order's shipment service level."
                    },
                    "OrderTotal": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "NumberOfItemsShipped": {
                        "type": "integer",
                        "description": "The number of items shipped."
                    },
                    "NumberOfItemsUnshipped": {
                        "type": "integer",
                        "description": "The number of items unshipped."
                    },
                    "PaymentExecutionDetail": {
                        "$ref": "#/components/schemas/PaymentExecutionDetailItemList"
                    },
                    "PaymentMethod": {
                        "type": "string",
                        "description": "The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the `PaymentExecutionDetailItem` object, we recommend using the `PaymentMethodDetails` property to get payment method information.",
                        "enum": [
                            "COD",
                            "CVS",
                            "Other"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "COD",
                                "description": "Cash on delivery."
                            },
                            {
                                "value": "CVS",
                                "description": "Convenience store."
                            },
                            {
                                "value": "Other",
                                "description": "A payment method other than COD and CVS."
                            }
                        ]
                    },
                    "PaymentMethodDetails": {
                        "$ref": "#/components/schemas/PaymentMethodDetailItemList"
                    },
                    "MarketplaceId": {
                        "type": "string",
                        "description": "The identifier for the marketplace where the order was placed."
                    },
                    "ShipmentServiceLevelCategory": {
                        "type": "string",
                        "description": "The shipment service level category for the order.\n\n**Possible values**: `Expedited`, `FreeEconomy`, `NextDay`, `Priority`, `SameDay`, `SecondDay`, `Scheduled`, and `Standard`."
                    },
                    "EasyShipShipmentStatus": {
                        "$ref": "#/components/schemas/EasyShipShipmentStatus"
                    },
                    "CbaDisplayableShippingLabel": {
                        "type": "string",
                        "description": "Custom ship label for Checkout by Amazon (CBA)."
                    },
                    "OrderType": {
                        "type": "string",
                        "description": "The order's type.",
                        "enum": [
                            "StandardOrder",
                            "LongLeadTimeOrder",
                            "Preorder",
                            "BackOrder",
                            "SourcingOnDemandOrder"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "StandardOrder",
                                "description": "An order that contains items for which the selling partner currently has inventory in stock."
                            },
                            {
                                "value": "LongLeadTimeOrder",
                                "description": "An order that contains items that have a long lead time to ship."
                            },
                            {
                                "value": "Preorder",
                                "description": "An order that contains items with a release date that is in the future."
                            },
                            {
                                "value": "BackOrder",
                                "description": "An order that contains items that already have been released in the market but are currently out of stock and will be available in the future."
                            },
                            {
                                "value": "SourcingOnDemandOrder",
                                "description": "A Sourcing On Demand order."
                            }
                        ]
                    },
                    "EarliestShipDate": {
                        "type": "string",
                        "description": "The start of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.\n\n__Note__: `EarliestShipDate` might not be returned for orders placed before February 1, 2013."
                    },
                    "LatestShipDate": {
                        "type": "string",
                        "description": "The end of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.\n\n__Note__: `LatestShipDate` might not be returned for orders placed before February 1, 2013."
                    },
                    "EarliestDeliveryDate": {
                        "type": "string",
                        "description": "The start of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders."
                    },
                    "LatestDeliveryDate": {
                        "type": "string",
                        "description": "The end of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders that do not have a `PendingAvailability`, `Pending`, or `Canceled` status."
                    },
                    "IsBusinessOrder": {
                        "type": "boolean",
                        "description": "When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer."
                    },
                    "IsPrime": {
                        "type": "boolean",
                        "description": "When true, the order is a seller-fulfilled Amazon Prime order."
                    },
                    "IsPremiumOrder": {
                        "type": "boolean",
                        "description": "When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace."
                    },
                    "IsGlobalExpressEnabled": {
                        "type": "boolean",
                        "description": "When true, the order is a `GlobalExpress` order."
                    },
                    "ReplacedOrderId": {
                        "type": "string",
                        "description": "The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true."
                    },
                    "IsReplacementOrder": {
                        "type": "boolean",
                        "description": "When true, this is a replacement order."
                    },
                    "PromiseResponseDueDate": {
                        "type": "string",
                        "description": "Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders."
                    },
                    "IsEstimatedShipDateSet": {
                        "type": "boolean",
                        "description": "When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders."
                    },
                    "IsSoldByAB": {
                        "type": "boolean",
                        "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller."
                    },
                    "IsIBA": {
                        "type": "boolean",
                        "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller."
                    },
                    "DefaultShipFromLocationAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "BuyerInvoicePreference": {
                        "type": "string",
                        "description": "The buyer's invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.\n\n**Note**: This attribute is only available in the Turkey marketplace.",
                        "enum": [
                            "INDIVIDUAL",
                            "BUSINESS"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "INDIVIDUAL",
                                "description": "Issues an individual invoice to the buyer."
                            },
                            {
                                "value": "BUSINESS",
                                "description": "Issues a business invoice to the buyer. Tax information is available in `BuyerTaxInformation`."
                            }
                        ]
                    },
                    "BuyerTaxInformation": {
                        "$ref": "#/components/schemas/BuyerTaxInformation"
                    },
                    "FulfillmentInstruction": {
                        "$ref": "#/components/schemas/FulfillmentInstruction"
                    },
                    "IsISPU": {
                        "type": "boolean",
                        "description": "When true, this order is marked to be picked up from a store rather than delivered."
                    },
                    "IsAccessPointOrder": {
                        "type": "boolean",
                        "description": "When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers."
                    },
                    "MarketplaceTaxInfo": {
                        "$ref": "#/components/schemas/MarketplaceTaxInfo"
                    },
                    "SellerDisplayName": {
                        "type": "string",
                        "description": "The seller\u2019s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.\n\n**Note**: This attribute is only available in the Brazil marketplace for the orders with `Pending` or `Unshipped` status."
                    },
                    "ShippingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "BuyerInfo": {
                        "$ref": "#/components/schemas/BuyerInfo"
                    },
                    "AutomatedShippingSettings": {
                        "$ref": "#/components/schemas/AutomatedShippingSettings"
                    },
                    "HasRegulatedItems": {
                        "type": "boolean",
                        "description": "Whether the order contains regulated items which may require additional approval steps before being fulfilled."
                    },
                    "ElectronicInvoiceStatus": {
                        "$ref": "#/components/schemas/ElectronicInvoiceStatus"
                    }
                },
                "description": "Order information."
            },
            "OrderBuyerInfo": {
                "required": [
                    "AmazonOrderId"
                ],
                "type": "object",
                "properties": {
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    },
                    "BuyerEmail": {
                        "type": "string",
                        "description": "The anonymized email address of the buyer."
                    },
                    "BuyerName": {
                        "type": "string",
                        "description": "The buyer name or the recipient name."
                    },
                    "BuyerCounty": {
                        "type": "string",
                        "description": "The county of the buyer.\n\n**Note**: This attribute is only available in the Brazil marketplace."
                    },
                    "BuyerTaxInfo": {
                        "$ref": "#/components/schemas/BuyerTaxInfo"
                    },
                    "PurchaseOrderNumber": {
                        "type": "string",
                        "description": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout."
                    }
                },
                "description": "Buyer information for an order."
            },
            "OrderRegulatedInfo": {
                "required": [
                    "AmazonOrderId",
                    "RegulatedInformation",
                    "RegulatedOrderVerificationStatus",
                    "RequiresDosageLabel"
                ],
                "type": "object",
                "properties": {
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    },
                    "RegulatedInformation": {
                        "$ref": "#/components/schemas/RegulatedInformation"
                    },
                    "RequiresDosageLabel": {
                        "type": "boolean",
                        "description": "When true, the order requires attaching a dosage information label when shipped."
                    },
                    "RegulatedOrderVerificationStatus": {
                        "$ref": "#/components/schemas/RegulatedOrderVerificationStatus"
                    }
                },
                "description": "The order's regulated information along with its verification status."
            },
            "RegulatedOrderVerificationStatus": {
                "required": [
                    "RequiresMerchantAction",
                    "Status",
                    "ValidRejectionReasons"
                ],
                "type": "object",
                "properties": {
                    "Status": {
                        "$ref": "#/components/schemas/VerificationStatus"
                    },
                    "RequiresMerchantAction": {
                        "type": "boolean",
                        "description": "When true, the regulated information provided in the order requires a review by the merchant."
                    },
                    "ValidRejectionReasons": {
                        "type": "array",
                        "description": "A list of valid rejection reasons that may be used to reject the order's regulated information.",
                        "items": {
                            "$ref": "#/components/schemas/RejectionReason"
                        }
                    },
                    "RejectionReason": {
                        "$ref": "#/components/schemas/RejectionReason"
                    },
                    "ReviewDate": {
                        "type": "string",
                        "description": "The date the order was reviewed. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format."
                    },
                    "ExternalReviewerId": {
                        "type": "string",
                        "description": "The identifier for the order's regulated information reviewer."
                    },
                    "ValidVerificationDetails": {
                        "type": "array",
                        "description": "A list of valid verification details that may be provided and the criteria required for when the verification detail can be provided.",
                        "items": {
                            "$ref": "#/components/schemas/ValidVerificationDetail"
                        }
                    }
                },
                "description": "The verification status of the order, along with associated approval or rejection metadata."
            },
            "RejectionReason": {
                "required": [
                    "RejectionReasonDescription",
                    "RejectionReasonId"
                ],
                "type": "object",
                "properties": {
                    "RejectionReasonId": {
                        "type": "string",
                        "description": "The unique identifier for the rejection reason."
                    },
                    "RejectionReasonDescription": {
                        "type": "string",
                        "description": "The description of this rejection reason."
                    }
                },
                "description": "The reason for rejecting the order's regulated information. This is only present if the order is rejected."
            },
            "PrescriptionDetail": {
                "required": [
                    "clinicId",
                    "expirationDate",
                    "prescriptionId",
                    "refillsRemaining",
                    "totalRefillsAuthorized",
                    "usageInstructions",
                    "writtenQuantity"
                ],
                "type": "object",
                "properties": {
                    "prescriptionId": {
                        "type": "string",
                        "description": "The identifier for the prescription used to verify the regulated product."
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.",
                        "format": "date-time"
                    },
                    "writtenQuantity": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of units in each fill as provided in the prescription."
                    },
                    "totalRefillsAuthorized": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0."
                    },
                    "refillsRemaining": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be `10` for the first order, `9` for the second order, and `0` for the eleventh order. If a prescription originally had no refills, this value must be 0."
                    },
                    "clinicId": {
                        "type": "string",
                        "description": "The identifier for the clinic which provided the prescription used to verify the regulated product."
                    },
                    "usageInstructions": {
                        "type": "string",
                        "description": "The instructions for the prescription as provided by the approver of the regulated product."
                    }
                },
                "description": "Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the seller\u2019s own records. Only approved orders can have prescriptions."
            },
            "ValidVerificationDetail": {
                "required": [
                    "ValidVerificationStatuses",
                    "VerificationDetailType"
                ],
                "type": "object",
                "properties": {
                    "VerificationDetailType": {
                        "type": "string",
                        "description": "A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: `prescriptionDetail`."
                    },
                    "ValidVerificationStatuses": {
                        "type": "array",
                        "description": "A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\"Approved\"], calls to provide the associated verification detail will fail for orders with a `VerificationStatus` of `Pending`, `Rejected`, `Expired`, or `Cancelled`.",
                        "items": {
                            "$ref": "#/components/schemas/VerificationStatus"
                        }
                    }
                },
                "description": "The types of verification details that may be provided for the order and the criteria required for when the type of verification detail can be provided. The types of verification details allowed depend on the type of regulated product and will not change order to order."
            },
            "VerificationDetails": {
                "type": "object",
                "properties": {
                    "prescriptionDetail": {
                        "$ref": "#/components/schemas/PrescriptionDetail"
                    }
                },
                "description": "Additional information related to the verification of a regulated order."
            },
            "VerificationStatus": {
                "type": "string",
                "description": "The verification status of the order.",
                "enum": [
                    "Pending",
                    "Approved",
                    "Rejected",
                    "Expired",
                    "Cancelled"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "Pending",
                        "description": "The order is pending approval. Note that the approval might be needed from someone other than the merchant as determined by the `RequiresMerchantAction` property."
                    },
                    {
                        "value": "Approved",
                        "description": "The order's regulated information has been reviewed and approved."
                    },
                    {
                        "value": "Rejected",
                        "description": "The order's regulated information has been reviewed and rejected."
                    },
                    {
                        "value": "Expired",
                        "description": "The time to review the order's regulated information has expired."
                    },
                    {
                        "value": "Cancelled",
                        "description": "The order was cancelled by the purchaser."
                    }
                ]
            },
            "RegulatedInformation": {
                "required": [
                    "Fields"
                ],
                "type": "object",
                "properties": {
                    "Fields": {
                        "type": "array",
                        "description": "A list of regulated information fields as collected from the regulatory form.",
                        "items": {
                            "$ref": "#/components/schemas/RegulatedInformationField"
                        }
                    }
                },
                "description": "The regulated information collected during purchase and used to verify the order."
            },
            "RegulatedInformationField": {
                "required": [
                    "FieldId",
                    "FieldLabel",
                    "FieldType",
                    "FieldValue"
                ],
                "type": "object",
                "properties": {
                    "FieldId": {
                        "type": "string",
                        "description": "The unique identifier of the field."
                    },
                    "FieldLabel": {
                        "type": "string",
                        "description": "The name of the field."
                    },
                    "FieldType": {
                        "type": "string",
                        "description": "The type of field.",
                        "enum": [
                            "Text",
                            "FileAttachment"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "Text",
                                "description": "This field is a text representation of the response collected from the regulatory form."
                            },
                            {
                                "value": "FileAttachment",
                                "description": "This field contains a link to an attachment collected from the regulatory form."
                            }
                        ]
                    },
                    "FieldValue": {
                        "type": "string",
                        "description": "The content of the field as collected in regulatory form. Note that `FileAttachment` type fields contain a URL where you can download the attachment."
                    }
                },
                "description": "A field collected from the regulatory form."
            },
            "OrderAddress": {
                "required": [
                    "AmazonOrderId"
                ],
                "type": "object",
                "properties": {
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    },
                    "BuyerCompanyName": {
                        "type": "string",
                        "description": "The company name of the contact buyer. For IBA orders, the buyer company must be Amazon entities."
                    },
                    "ShippingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "DeliveryPreferences": {
                        "$ref": "#/components/schemas/DeliveryPreferences"
                    }
                },
                "description": "The shipping address for the order."
            },
            "Address": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "The name."
                    },
                    "CompanyName": {
                        "type": "string",
                        "description": "The company name of the recipient.\n\n**Note**: This attribute is only available for shipping address."
                    },
                    "AddressLine1": {
                        "type": "string",
                        "description": "The street address."
                    },
                    "AddressLine2": {
                        "type": "string",
                        "description": "Additional street address information, if required."
                    },
                    "AddressLine3": {
                        "type": "string",
                        "description": "Additional street address information, if required."
                    },
                    "City": {
                        "type": "string",
                        "description": "The city."
                    },
                    "County": {
                        "type": "string",
                        "description": "The county."
                    },
                    "District": {
                        "type": "string",
                        "description": "The district."
                    },
                    "StateOrRegion": {
                        "type": "string",
                        "description": "The state or region."
                    },
                    "Municipality": {
                        "type": "string",
                        "description": "The municipality."
                    },
                    "PostalCode": {
                        "type": "string",
                        "description": "The postal code."
                    },
                    "CountryCode": {
                        "type": "string",
                        "description": "The country code. A two-character country code, in ISO 3166-1 alpha-2 format."
                    },
                    "Phone": {
                        "type": "string",
                        "description": "The phone number of the buyer.\n\n**Note**: \n1. This attribute is only available for shipping address.\n2. In some cases, the buyer phone number is suppressed: \na. Phone is suppressed for all `AFN` (fulfilled by Amazon) orders.\nb. Phone is suppressed for the shipped `MFN` (fulfilled by seller) order when the current date is past the Latest Delivery Date."
                    },
                    "ExtendedFields": {
                        "$ref": "#/components/schemas/AddressExtendedFields"
                    },
                    "AddressType": {
                        "type": "string",
                        "description": "The address type of the shipping address.",
                        "enum": [
                            "Residential",
                            "Commercial"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "Residential",
                                "description": "The shipping address is a residential address."
                            },
                            {
                                "value": "Commercial",
                                "description": "The shipping address is a commercial address."
                            }
                        ]
                    }
                },
                "description": "The shipping address for the order."
            },
            "AddressExtendedFields": {
                "type": "object",
                "properties": {
                    "StreetName": {
                        "type": "string",
                        "description": "The street name."
                    },
                    "StreetNumber": {
                        "type": "string",
                        "description": "The house, building, or property number associated with the location's street address."
                    },
                    "Complement": {
                        "type": "string",
                        "description": "The floor number/unit number in the building/private house number."
                    },
                    "Neighborhood": {
                        "type": "string",
                        "description": "The neighborhood. This value is only used in some countries (such as Brazil)."
                    }
                },
                "description": "The container for address extended fields (such as `street name` and `street number`). Currently only available with Brazil shipping addresses."
            },
            "DeliveryPreferences": {
                "type": "object",
                "properties": {
                    "DropOffLocation": {
                        "type": "string",
                        "description": "Drop-off location selected by the customer."
                    },
                    "PreferredDeliveryTime": {
                        "$ref": "#/components/schemas/PreferredDeliveryTime"
                    },
                    "OtherAttributes": {
                        "type": "array",
                        "description": "Enumerated list of miscellaneous delivery attributes associated with the shipping address.",
                        "items": {
                            "$ref": "#/components/schemas/OtherDeliveryAttributes"
                        }
                    },
                    "AddressInstructions": {
                        "type": "string",
                        "description": "Building instructions, nearby landmark or navigation instructions."
                    }
                },
                "description": "Contains all of the delivery instructions provided by the customer for the shipping address."
            },
            "PreferredDeliveryTime": {
                "type": "object",
                "properties": {
                    "BusinessHours": {
                        "type": "array",
                        "description": "Business hours when the business is open for deliveries.",
                        "items": {
                            "$ref": "#/components/schemas/BusinessHours"
                        }
                    },
                    "ExceptionDates": {
                        "type": "array",
                        "description": "Dates when the business is closed during the next 30 days.",
                        "items": {
                            "$ref": "#/components/schemas/ExceptionDates"
                        }
                    }
                },
                "description": "The time window when the delivery is preferred."
            },
            "BusinessHours": {
                "type": "object",
                "properties": {
                    "DayOfWeek": {
                        "type": "string",
                        "description": "Day of the week.",
                        "enum": [
                            "SUN",
                            "MON",
                            "TUE",
                            "WED",
                            "THU",
                            "FRI",
                            "SAT"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "SUN",
                                "description": "Sunday - Day of the week."
                            },
                            {
                                "value": "MON",
                                "description": "Monday - Day of the week."
                            },
                            {
                                "value": "TUE",
                                "description": "Tuesday - Day of the week."
                            },
                            {
                                "value": "WED",
                                "description": "Wednesday - Day of the week."
                            },
                            {
                                "value": "THU",
                                "description": "Thursday - Day of the week."
                            },
                            {
                                "value": "FRI",
                                "description": "Friday - Day of the week."
                            },
                            {
                                "value": "SAT",
                                "description": "Saturday - Day of the week."
                            }
                        ]
                    },
                    "OpenIntervals": {
                        "type": "array",
                        "description": "Time window during the day when the business is open.",
                        "items": {
                            "$ref": "#/components/schemas/OpenInterval"
                        }
                    }
                },
                "description": "Business days and hours when the destination is open for deliveries."
            },
            "ExceptionDates": {
                "type": "object",
                "properties": {
                    "ExceptionDate": {
                        "type": "string",
                        "description": "Date when the business is closed, in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date format."
                    },
                    "IsOpen": {
                        "type": "boolean",
                        "description": "Boolean indicating if the business is closed or open on that date."
                    },
                    "OpenIntervals": {
                        "type": "array",
                        "description": "Time window during the day when the business is open.",
                        "items": {
                            "$ref": "#/components/schemas/OpenInterval"
                        }
                    }
                },
                "description": "Dates when the business is closed or open with a different time window."
            },
            "OpenInterval": {
                "type": "object",
                "properties": {
                    "StartTime": {
                        "$ref": "#/components/schemas/OpenTimeInterval"
                    },
                    "EndTime": {
                        "$ref": "#/components/schemas/OpenTimeInterval"
                    }
                },
                "description": "The time interval for which the business is open."
            },
            "OpenTimeInterval": {
                "type": "object",
                "properties": {
                    "Hour": {
                        "type": "integer",
                        "description": "The hour when the business opens or closes."
                    },
                    "Minute": {
                        "type": "integer",
                        "description": "The minute when the business opens or closes."
                    }
                },
                "description": "The time when the business opens or closes."
            },
            "OtherDeliveryAttributes": {
                "type": "string",
                "description": "Miscellaneous delivery attributes associated with the shipping address.",
                "enum": [
                    "HAS_ACCESS_POINT",
                    "PALLET_ENABLED",
                    "PALLET_DISABLED"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "HAS_ACCESS_POINT",
                        "description": "Indicates whether the delivery has an access point pickup or drop-off location."
                    },
                    {
                        "value": "PALLET_ENABLED",
                        "description": "Indicates whether pallet delivery is enabled for the address."
                    },
                    {
                        "value": "PALLET_DISABLED",
                        "description": "Indicates whether pallet delivery is disabled for the address."
                    }
                ]
            },
            "Money": {
                "type": "object",
                "properties": {
                    "CurrencyCode": {
                        "type": "string",
                        "description": "The three-digit currency code. In ISO 4217 format."
                    },
                    "Amount": {
                        "type": "string",
                        "description": "The currency amount."
                    }
                },
                "description": "The monetary value of the order."
            },
            "PaymentMethodDetailItemList": {
                "type": "array",
                "description": "A list of payment method detail items.",
                "items": {
                    "type": "string"
                }
            },
            "PaymentExecutionDetailItemList": {
                "type": "array",
                "description": "A list of payment execution detail items.",
                "items": {
                    "$ref": "#/components/schemas/PaymentExecutionDetailItem"
                }
            },
            "PaymentExecutionDetailItem": {
                "required": [
                    "Payment",
                    "PaymentMethod"
                ],
                "type": "object",
                "properties": {
                    "Payment": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "PaymentMethod": {
                        "type": "string",
                        "description": "A sub-payment method for a COD order.\n\n**Possible values**:\n* `COD`: Cash on delivery \n* `GC`: Gift card \n* `PointsAccount`: Amazon Points\n* `Invoice`: Invoice"
                    }
                },
                "description": "Information about a sub-payment method used to pay for a COD order."
            },
            "BuyerTaxInfo": {
                "type": "object",
                "properties": {
                    "CompanyLegalName": {
                        "type": "string",
                        "description": "The legal name of the company."
                    },
                    "TaxingRegion": {
                        "type": "string",
                        "description": "The country or region imposing the tax."
                    },
                    "TaxClassifications": {
                        "type": "array",
                        "description": "A list of tax classifications that apply to the order.",
                        "items": {
                            "$ref": "#/components/schemas/TaxClassification"
                        }
                    }
                },
                "description": "Tax information about the buyer."
            },
            "MarketplaceTaxInfo": {
                "type": "object",
                "properties": {
                    "TaxClassifications": {
                        "type": "array",
                        "description": "A list of tax classifications that apply to the order.",
                        "items": {
                            "$ref": "#/components/schemas/TaxClassification"
                        }
                    }
                },
                "description": "Tax information about the marketplace."
            },
            "TaxClassification": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string",
                        "description": "The type of tax."
                    },
                    "Value": {
                        "type": "string",
                        "description": "The buyer's tax identifier."
                    }
                },
                "description": "The tax classification of the order."
            },
            "OrderItemsList": {
                "required": [
                    "AmazonOrderId",
                    "OrderItems"
                ],
                "type": "object",
                "properties": {
                    "OrderItems": {
                        "$ref": "#/components/schemas/OrderItemList"
                    },
                    "NextToken": {
                        "type": "string",
                        "description": "When present and not empty, pass this string token in the next request to return the next response page."
                    },
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    }
                },
                "description": "The order items list along with the order ID."
            },
            "OrderItemList": {
                "type": "array",
                "description": "A list of order items.",
                "items": {
                    "$ref": "#/components/schemas/OrderItem"
                }
            },
            "OrderItem": {
                "required": [
                    "ASIN",
                    "OrderItemId",
                    "QuantityOrdered"
                ],
                "type": "object",
                "properties": {
                    "ASIN": {
                        "type": "string",
                        "description": "The item's Amazon Standard Identification Number (ASIN)."
                    },
                    "SellerSKU": {
                        "type": "string",
                        "description": "The item's seller stock keeping unit (SKU)."
                    },
                    "OrderItemId": {
                        "type": "string",
                        "description": "An Amazon-defined order item identifier."
                    },
                    "AssociatedItems": {
                        "type": "array",
                        "description": "A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires.",
                        "items": {
                            "$ref": "#/components/schemas/AssociatedItem"
                        }
                    },
                    "Title": {
                        "type": "string",
                        "description": "The item's name."
                    },
                    "QuantityOrdered": {
                        "type": "integer",
                        "description": "The number of items in the order. "
                    },
                    "QuantityShipped": {
                        "type": "integer",
                        "description": "The number of items shipped."
                    },
                    "ProductInfo": {
                        "$ref": "#/components/schemas/ProductInfoDetail"
                    },
                    "PointsGranted": {
                        "$ref": "#/components/schemas/PointsGrantedDetail"
                    },
                    "ItemPrice": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "ShippingPrice": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "ItemTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "ShippingTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "ShippingDiscount": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "ShippingDiscountTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "PromotionDiscount": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "PromotionDiscountTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "PromotionIds": {
                        "$ref": "#/components/schemas/PromotionIdList"
                    },
                    "CODFee": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "CODFeeDiscount": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "IsGift": {
                        "type": "string",
                        "description": "Indicates whether the item is a gift.\n\n**Possible values**: `true` and `false`."
                    },
                    "ConditionNote": {
                        "type": "string",
                        "description": "The condition of the item, as described by the seller."
                    },
                    "ConditionId": {
                        "type": "string",
                        "description": "The condition of the item.\n\n**Possible values**: `New`, `Used`, `Collectible`, `Refurbished`, `Preorder`, and `Club`."
                    },
                    "ConditionSubtypeId": {
                        "type": "string",
                        "description": "The subcondition of the item.\n\n**Possible values**: `New`, `Mint`, `Very Good`, `Good`, `Acceptable`, `Poor`, `Club`, `OEM`, `Warranty`, `Refurbished Warranty`, `Refurbished`, `Open Box`, `Any`, and `Other`."
                    },
                    "ScheduledDeliveryStartDate": {
                        "type": "string",
                        "description": "The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format."
                    },
                    "ScheduledDeliveryEndDate": {
                        "type": "string",
                        "description": "The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format."
                    },
                    "PriceDesignation": {
                        "type": "string",
                        "description": "Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business). \n\n**Possible values**: `BusinessPrice`"
                    },
                    "TaxCollection": {
                        "$ref": "#/components/schemas/TaxCollection"
                    },
                    "SerialNumberRequired": {
                        "type": "boolean",
                        "description": "When true, the product type for this item has a serial number.\n\n Only returned for Amazon Easy Ship orders."
                    },
                    "IsTransparency": {
                        "type": "boolean",
                        "description": "When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:\n\n**1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN).\n**2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.\n**QR code SN:** Submit the URL that the QR code generates."
                    },
                    "IossNumber": {
                        "type": "string",
                        "description": "The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale."
                    },
                    "StoreChainStoreId": {
                        "type": "string",
                        "description": "The store chain store identifier. Linked to a specific store in a store chain."
                    },
                    "DeemedResellerCategory": {
                        "type": "string",
                        "description": "The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.",
                        "enum": [
                            "IOSS",
                            "UOSS"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "IOSS",
                                "description": "Import one stop shop. The item being purchased is not held in the EU for shipment."
                            },
                            {
                                "value": "UOSS",
                                "description": "Union one stop shop. The item being purchased is held in the EU for shipment."
                            }
                        ]
                    },
                    "BuyerInfo": {
                        "$ref": "#/components/schemas/ItemBuyerInfo"
                    },
                    "BuyerRequestedCancel": {
                        "$ref": "#/components/schemas/BuyerRequestedCancel"
                    },
                    "SerialNumbers": {
                        "type": "array",
                        "description": "A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "SubstitutionPreferences": {
                        "$ref": "#/components/schemas/SubstitutionPreferences"
                    },
                    "Measurement": {
                        "$ref": "#/components/schemas/Measurement"
                    },
                    "ShippingConstraints": {
                        "$ref": "#/components/schemas/ShippingConstraints"
                    },
                    "AmazonPrograms": {
                        "$ref": "#/components/schemas/AmazonPrograms"
                    }
                },
                "description": "A single order item."
            },
            "AmazonPrograms": {
                "required": [
                    "Programs"
                ],
                "type": "object",
                "properties": {
                    "Programs": {
                        "type": "array",
                        "description": "A list of the programs that are associated with the specified order item.\n\n**Possible values**: `SUBSCRIBE_AND_SAVE`",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Contains the list of programs that are associated with an item.\n\nPossible programs are:\n - **Subscribe and Save**: Offers recurring, scheduled deliveries to Amazon customers and Amazon Business customers for their frequently ordered products."
            },
            "SubstitutionPreferences": {
                "required": [
                    "SubstitutionType"
                ],
                "type": "object",
                "properties": {
                    "SubstitutionType": {
                        "type": "string",
                        "description": "The type of substitution that these preferences represent.",
                        "enum": [
                            "CUSTOMER_PREFERENCE",
                            "AMAZON_RECOMMENDED",
                            "DO_NOT_SUBSTITUTE"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "CUSTOMER_PREFERENCE",
                                "description": "Customer has provided the substitution preferences."
                            },
                            {
                                "value": "AMAZON_RECOMMENDED",
                                "description": "Amazon has provided the substitution preferences."
                            },
                            {
                                "value": "DO_NOT_SUBSTITUTE",
                                "description": "Do not provide a substitute if item is not found."
                            }
                        ]
                    },
                    "SubstitutionOptions": {
                        "$ref": "#/components/schemas/SubstitutionOptionList"
                    }
                },
                "description": "Substitution preferences for an order item."
            },
            "SubstitutionOptionList": {
                "type": "array",
                "description": "A collection of substitution options.",
                "items": {
                    "$ref": "#/components/schemas/SubstitutionOption"
                }
            },
            "SubstitutionOption": {
                "type": "object",
                "properties": {
                    "ASIN": {
                        "type": "string",
                        "description": "The item's Amazon Standard Identification Number (ASIN)."
                    },
                    "QuantityOrdered": {
                        "type": "integer",
                        "description": "The number of items to be picked for this substitution option. "
                    },
                    "SellerSKU": {
                        "type": "string",
                        "description": "The item's seller stock keeping unit (SKU)."
                    },
                    "Title": {
                        "type": "string",
                        "description": "The item's title."
                    },
                    "Measurement": {
                        "$ref": "#/components/schemas/Measurement"
                    }
                },
                "description": "Substitution options for an order item."
            },
            "Measurement": {
                "required": [
                    "Unit",
                    "Value"
                ],
                "type": "object",
                "properties": {
                    "Unit": {
                        "type": "string",
                        "description": "The unit of measure.",
                        "enum": [
                            "OUNCES",
                            "POUNDS",
                            "KILOGRAMS",
                            "GRAMS",
                            "MILLIGRAMS",
                            "INCHES",
                            "FEET",
                            "METERS",
                            "CENTIMETERS",
                            "MILLIMETERS",
                            "SQUARE_METERS",
                            "SQUARE_CENTIMETERS",
                            "SQUARE_FEET",
                            "SQUARE_INCHES",
                            "GALLONS",
                            "PINTS",
                            "QUARTS",
                            "FLUID_OUNCES",
                            "LITERS",
                            "CUBIC_METERS",
                            "CUBIC_FEET",
                            "CUBIC_INCHES",
                            "CUBIC_CENTIMETERS",
                            "COUNT"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "OUNCES",
                                "description": "The item is measured in ounces."
                            },
                            {
                                "value": "POUNDS",
                                "description": "The item is measured in pounds."
                            },
                            {
                                "value": "KILOGRAMS",
                                "description": "The item is measured in kilograms."
                            },
                            {
                                "value": "GRAMS",
                                "description": "The item is measured in grams."
                            },
                            {
                                "value": "MILLIGRAMS",
                                "description": "The item is measured in milligrams."
                            },
                            {
                                "value": "INCHES",
                                "description": "The item is measured in inches."
                            },
                            {
                                "value": "FEET",
                                "description": "The item is measured in feet."
                            },
                            {
                                "value": "METERS",
                                "description": "The item is measured in meters."
                            },
                            {
                                "value": "CENTIMETERS",
                                "description": "The item is measured in centimeters."
                            },
                            {
                                "value": "MILLIMETERS",
                                "description": "The item is measured in millimeters."
                            },
                            {
                                "value": "SQUARE_METERS",
                                "description": "The item is measured in square meters."
                            },
                            {
                                "value": "SQUARE_CENTIMETERS",
                                "description": "The item is measured in square centimeters."
                            },
                            {
                                "value": "SQUARE_FEET",
                                "description": "The item is measured in square feet."
                            },
                            {
                                "value": "SQUARE_INCHES",
                                "description": "The item is measured in square inches."
                            },
                            {
                                "value": "GALLONS",
                                "description": "The item is measured in gallons."
                            },
                            {
                                "value": "PINTS",
                                "description": "The item is measured in pints."
                            },
                            {
                                "value": "QUARTS",
                                "description": "The item is measured in quarts."
                            },
                            {
                                "value": "FLUID_OUNCES",
                                "description": "The item is measured in fluid ounces."
                            },
                            {
                                "value": "LITERS",
                                "description": "The item is measured in liters."
                            },
                            {
                                "value": "CUBIC_METERS",
                                "description": "The item is measured in cubic meters."
                            },
                            {
                                "value": "CUBIC_FEET",
                                "description": "The item is measured in cubic feet."
                            },
                            {
                                "value": "CUBIC_INCHES",
                                "description": "The item is measured in cubic inches."
                            },
                            {
                                "value": "CUBIC_CENTIMETERS",
                                "description": "The item is measured in cubic centimeters."
                            },
                            {
                                "value": "COUNT",
                                "description": "The item is measured by count."
                            }
                        ]
                    },
                    "Value": {
                        "type": "number",
                        "description": "The measurement value."
                    }
                },
                "description": "Measurement information for an order item."
            },
            "AssociatedItem": {
                "type": "object",
                "properties": {
                    "OrderId": {
                        "type": "string",
                        "description": "The order item's order identifier, in 3-7-7 format."
                    },
                    "OrderItemId": {
                        "type": "string",
                        "description": "An Amazon-defined item identifier for the associated item."
                    },
                    "AssociationType": {
                        "$ref": "#/components/schemas/AssociationType"
                    }
                },
                "description": "An item that is associated with an order item. For example, a tire installation service that is purchased with tires."
            },
            "AssociationType": {
                "type": "string",
                "description": "The type of association an item has with an order item.",
                "enum": [
                    "VALUE_ADD_SERVICE"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "VALUE_ADD_SERVICE",
                        "description": "The associated item is a service order."
                    }
                ]
            },
            "OrderItemsBuyerInfoList": {
                "required": [
                    "AmazonOrderId",
                    "OrderItems"
                ],
                "type": "object",
                "properties": {
                    "OrderItems": {
                        "$ref": "#/components/schemas/OrderItemBuyerInfoList"
                    },
                    "NextToken": {
                        "type": "string",
                        "description": "When present and not empty, pass this string token in the next request to return the next response page."
                    },
                    "AmazonOrderId": {
                        "type": "string",
                        "description": "An Amazon-defined order identifier, in 3-7-7 format."
                    }
                },
                "description": "A single order item's buyer information list with the order ID."
            },
            "OrderItemBuyerInfoList": {
                "type": "array",
                "description": "A single order item's buyer information list.",
                "items": {
                    "$ref": "#/components/schemas/OrderItemBuyerInfo"
                }
            },
            "OrderItemBuyerInfo": {
                "required": [
                    "OrderItemId"
                ],
                "type": "object",
                "properties": {
                    "OrderItemId": {
                        "type": "string",
                        "description": "An Amazon-defined order item identifier."
                    },
                    "BuyerCustomizedInfo": {
                        "$ref": "#/components/schemas/BuyerCustomizedInfoDetail"
                    },
                    "GiftWrapPrice": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "GiftWrapTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "GiftMessageText": {
                        "type": "string",
                        "description": "A gift message provided by the buyer.\n\n**Note**: This attribute is only available for MFN (fulfilled by seller) orders."
                    },
                    "GiftWrapLevel": {
                        "type": "string",
                        "description": "The gift wrap level specified by the buyer."
                    }
                },
                "description": "A single order item's buyer information."
            },
            "PointsGrantedDetail": {
                "type": "object",
                "properties": {
                    "PointsNumber": {
                        "type": "integer",
                        "description": "The number of Amazon Points granted with the purchase of an item."
                    },
                    "PointsMonetaryValue": {
                        "$ref": "#/components/schemas/Money"
                    }
                },
                "description": "The number of Amazon Points offered with the purchase of an item, and their monetary value."
            },
            "ProductInfoDetail": {
                "type": "object",
                "properties": {
                    "NumberOfItems": {
                        "type": "string",
                        "description": "The total number of items that are included in the ASIN."
                    }
                },
                "description": "Product information on the number of items."
            },
            "PromotionIdList": {
                "type": "array",
                "description": "A list of promotion identifiers provided by the seller when the promotions were created.",
                "items": {
                    "type": "string"
                }
            },
            "BuyerCustomizedInfoDetail": {
                "type": "object",
                "properties": {
                    "CustomizedURL": {
                        "type": "string",
                        "description": "The location of a ZIP file containing Amazon Custom data."
                    }
                },
                "description": "Buyer information for custom orders from the Amazon Custom program."
            },
            "TaxCollection": {
                "type": "object",
                "properties": {
                    "Model": {
                        "type": "string",
                        "description": "The tax collection model applied to the item.",
                        "enum": [
                            "MarketplaceFacilitator"
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "MarketplaceFacilitator",
                                "description": "Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller."
                            }
                        ]
                    },
                    "ResponsibleParty": {
                        "type": "string",
                        "description": "The party responsible for withholding the taxes and remitting them to the taxing authority.",
                        "enum": [
                            "Amazon Services, Inc."
                        ],
                        "x-docgen-enum-table-extension": [
                            {
                                "value": "Amazon Services, Inc.",
                                "description": "The `MarketplaceFacilitator` entity for the US marketplace."
                            }
                        ]
                    }
                },
                "description": "Information about withheld taxes."
            },
            "BuyerTaxInformation": {
                "type": "object",
                "properties": {
                    "BuyerLegalCompanyName": {
                        "type": "string",
                        "description": "Business buyer's company legal name."
                    },
                    "BuyerBusinessAddress": {
                        "type": "string",
                        "description": "Business buyer's address."
                    },
                    "BuyerTaxRegistrationId": {
                        "type": "string",
                        "description": "Business buyer's tax registration ID."
                    },
                    "BuyerTaxOffice": {
                        "type": "string",
                        "description": "Business buyer's tax office."
                    }
                },
                "description": "Contains the business invoice tax information. Available only in the TR marketplace."
            },
            "FulfillmentInstruction": {
                "type": "object",
                "properties": {
                    "FulfillmentSupplySourceId": {
                        "type": "string",
                        "description": "The `sourceId` of the location from where you want the order fulfilled."
                    }
                },
                "description": "Contains the instructions about the fulfillment, such as the location from where you want the order filled."
            },
            "ShippingConstraints": {
                "type": "object",
                "properties": {
                    "PalletDelivery": {
                        "$ref": "#/components/schemas/ConstraintType"
                    },
                    "SignatureConfirmation": {
                        "$ref": "#/components/schemas/ConstraintType"
                    },
                    "RecipientIdentityVerification": {
                        "$ref": "#/components/schemas/ConstraintType"
                    },
                    "RecipientAgeVerification": {
                        "$ref": "#/components/schemas/ConstraintType"
                    }
                },
                "description": "Delivery constraints applicable to this order."
            },
            "ConstraintType": {
                "type": "string",
                "description": "Details the importance of the constraint present on the item",
                "enum": [
                    "MANDATORY"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "MANDATORY",
                        "description": "Item must follow the constraint to ensure order is met with buyer's delivery requirements."
                    }
                ]
            },
            "BuyerInfo": {
                "type": "object",
                "properties": {
                    "BuyerEmail": {
                        "type": "string",
                        "description": "The anonymized email address of the buyer."
                    },
                    "BuyerName": {
                        "type": "string",
                        "description": "The buyer name or the recipient name."
                    },
                    "BuyerCounty": {
                        "type": "string",
                        "description": "The county of the buyer.\n\n**Note**: This attribute is only available in the Brazil marketplace."
                    },
                    "BuyerTaxInfo": {
                        "$ref": "#/components/schemas/BuyerTaxInfo"
                    },
                    "PurchaseOrderNumber": {
                        "type": "string",
                        "description": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout."
                    }
                },
                "description": "Buyer information."
            },
            "ItemBuyerInfo": {
                "type": "object",
                "properties": {
                    "BuyerCustomizedInfo": {
                        "$ref": "#/components/schemas/BuyerCustomizedInfoDetail"
                    },
                    "GiftWrapPrice": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "GiftWrapTax": {
                        "$ref": "#/components/schemas/Money"
                    },
                    "GiftMessageText": {
                        "type": "string",
                        "description": "A gift message provided by the buyer.\n\n**Note**: This attribute is only available for MFN (fulfilled by seller) orders."
                    },
                    "GiftWrapLevel": {
                        "type": "string",
                        "description": "The gift wrap level specified by the buyer."
                    }
                },
                "description": "A single item's buyer information."
            },
            "AutomatedShippingSettings": {
                "type": "object",
                "properties": {
                    "HasAutomatedShippingSettings": {
                        "type": "boolean",
                        "description": "When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order."
                    },
                    "AutomatedCarrier": {
                        "type": "string",
                        "description": "Auto-generated carrier for SSA orders."
                    },
                    "AutomatedShipMethod": {
                        "type": "string",
                        "description": "Auto-generated ship method for SSA orders."
                    },
                    "AutomatedShipMethodName": {
                        "type": "string",
                        "description": "The name of the automated shipping method."
                    },
                    "AutomatedCarrierName": {
                        "type": "string",
                        "description": "The name of the automated carrier."
                    }
                },
                "description": "Contains information regarding the Shipping Settings Automation program, such as whether the order's shipping settings were generated automatically, and what those settings are."
            },
            "BuyerRequestedCancel": {
                "type": "object",
                "properties": {
                    "IsBuyerRequestedCancel": {
                        "type": "string",
                        "description": "Indicate whether the buyer has requested cancellation.\n\n**Possible Values**: `true`, `false`."
                    },
                    "BuyerCancelReason": {
                        "type": "string",
                        "description": "The reason that the buyer requested cancellation."
                    }
                },
                "description": "Information about whether or not a buyer requested cancellation."
            },
            "EasyShipShipmentStatus": {
                "type": "string",
                "description": "The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders.",
                "enum": [
                    "PendingSchedule",
                    "PendingPickUp",
                    "PendingDropOff",
                    "LabelCanceled",
                    "PickedUp",
                    "DroppedOff",
                    "AtOriginFC",
                    "AtDestinationFC",
                    "Delivered",
                    "RejectedByBuyer",
                    "Undeliverable",
                    "ReturningToSeller",
                    "ReturnedToSeller",
                    "Lost",
                    "OutForDelivery",
                    "Damaged"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "PendingSchedule",
                        "description": "The package is awaiting the schedule for pick-up."
                    },
                    {
                        "value": "PendingPickUp",
                        "description": "Amazon has not yet picked up the package from the seller."
                    },
                    {
                        "value": "PendingDropOff",
                        "description": "The seller will deliver the package to the carrier."
                    },
                    {
                        "value": "LabelCanceled",
                        "description": "The seller canceled the pickup."
                    },
                    {
                        "value": "PickedUp",
                        "description": "Amazon has picked up the package from the seller."
                    },
                    {
                        "value": "DroppedOff",
                        "description": "The package was delivered to the carrier by the seller."
                    },
                    {
                        "value": "AtOriginFC",
                        "description": "The package is at the origin fulfillment center."
                    },
                    {
                        "value": "AtDestinationFC",
                        "description": "The package is at the destination fulfillment center."
                    },
                    {
                        "value": "Delivered",
                        "description": "The package has been delivered."
                    },
                    {
                        "value": "RejectedByBuyer",
                        "description": "The package has been rejected by the buyer."
                    },
                    {
                        "value": "Undeliverable",
                        "description": "The package cannot be delivered."
                    },
                    {
                        "value": "ReturningToSeller",
                        "description": "The package was not delivered and is being returned to the seller."
                    },
                    {
                        "value": "ReturnedToSeller",
                        "description": "The package was not delivered and was returned to the seller."
                    },
                    {
                        "value": "Lost",
                        "description": "The package is lost."
                    },
                    {
                        "value": "OutForDelivery",
                        "description": "The package is out for delivery."
                    },
                    {
                        "value": "Damaged",
                        "description": "The package was damaged by the carrier."
                    }
                ]
            },
            "ElectronicInvoiceStatus": {
                "type": "string",
                "description": "The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace.",
                "enum": [
                    "NotRequired",
                    "NotFound",
                    "Processing",
                    "Errored",
                    "Accepted"
                ],
                "x-docgen-enum-table-extension": [
                    {
                        "value": "NotRequired",
                        "description": "The order does not require an electronic invoice to be uploaded."
                    },
                    {
                        "value": "NotFound",
                        "description": "The order requires an electronic invoice but it is not uploaded."
                    },
                    {
                        "value": "Processing",
                        "description": "The required electronic invoice was uploaded and is processing."
                    },
                    {
                        "value": "Errored",
                        "description": "The uploaded electronic invoice was not accepted."
                    },
                    {
                        "value": "Accepted",
                        "description": "The uploaded electronic invoice was accepted."
                    }
                ]
            },
            "ConfirmShipmentRequest": {
                "required": [
                    "marketplaceId",
                    "packageDetail"
                ],
                "type": "object",
                "properties": {
                    "packageDetail": {
                        "$ref": "#/components/schemas/PackageDetail"
                    },
                    "codCollectionMethod": {
                        "type": "string",
                        "description": "The COD collection method (only supported in the JP marketplace).",
                        "enum": [
                            "DirectPayment"
                        ]
                    },
                    "marketplaceId": {
                        "$ref": "#/components/schemas/MarketplaceId"
                    }
                },
                "description": "The request schema for an shipment confirmation."
            },
            "ConfirmShipmentErrorResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/ErrorList"
                    }
                },
                "description": "The error response schema for the `confirmShipment` operation."
            },
            "PackageDetail": {
                "required": [
                    "carrierCode",
                    "orderItems",
                    "packageReferenceId",
                    "shipDate",
                    "trackingNumber"
                ],
                "type": "object",
                "properties": {
                    "packageReferenceId": {
                        "$ref": "#/components/schemas/PackageReferenceId"
                    },
                    "carrierCode": {
                        "type": "string",
                        "description": "Identifies the carrier that will deliver the package. This field is required for all marketplaces. For more information, refer to the [`CarrierCode` announcement](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces)."
                    },
                    "carrierName": {
                        "type": "string",
                        "description": "Carrier Name that will deliver the package. Required when `carrierCode` is \"Others\" "
                    },
                    "shippingMethod": {
                        "type": "string",
                        "description": "Ship method to be used for shipping the order."
                    },
                    "trackingNumber": {
                        "type": "string",
                        "description": "The tracking number used to obtain tracking and delivery information."
                    },
                    "shipDate": {
                        "type": "string",
                        "description": "The shipping date for the package. Must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format.",
                        "format": "date-time"
                    },
                    "shipFromSupplySourceId": {
                        "type": "string",
                        "description": "The unique identifier for the supply source."
                    },
                    "orderItems": {
                        "$ref": "#/components/schemas/ConfirmShipmentOrderItemsList"
                    }
                },
                "description": "Properties of packages"
            },
            "ConfirmShipmentOrderItemsList": {
                "type": "array",
                "description": "A list of order items.",
                "items": {
                    "$ref": "#/components/schemas/ConfirmShipmentOrderItem"
                }
            },
            "ConfirmShipmentOrderItem": {
                "required": [
                    "orderItemId",
                    "quantity"
                ],
                "type": "object",
                "properties": {
                    "orderItemId": {
                        "type": "string",
                        "description": "The order item's unique identifier."
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The item's quantity."
                    },
                    "transparencyCodes": {
                        "$ref": "#/components/schemas/TransparencyCodeList"
                    }
                },
                "description": "A single order item."
            },
            "TransparencyCodeList": {
                "type": "array",
                "description": "A list of order items.",
                "items": {
                    "$ref": "#/components/schemas/TransparencyCode"
                }
            },
            "TransparencyCode": {
                "type": "string",
                "description": "The transparency code associated with the item."
            },
            "PackageReferenceId": {
                "type": "string",
                "description": "A seller-supplied identifier that uniquely identifies a package within the scope of an order. Only positive numeric values are supported."
            },
            "ErrorList": {
                "required": [
                    "errors"
                ],
                "type": "object",
                "description": "A list of error responses returned when a request is unsuccessful.",
                "properties": {
                    "errors": {
                        "type": "array",
                        "description": "A list of error responses returned when a request is unsuccessful.",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "Error": {
                "required": [
                    "code",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "An error code that identifies the type of error that occurred."
                    },
                    "message": {
                        "type": "string",
                        "description": "A message that describes the error condition."
                    },
                    "details": {
                        "type": "string",
                        "description": "Additional details that can help the caller understand or fix the issue."
                    }
                },
                "description": "Error response returned when the request is unsuccessful."
            }
        }
    },
    "x-original-swagger-version": "2.0"
}